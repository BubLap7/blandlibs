#include <plrutil_c.krnk>
#include <g.krnk>
#include <AABB.krnk>
#include <syncobjs_c.krnk>
# ===================================================================
# Library: libs\utils\plrbehavior\plrbhvr_c.krnk
# Author: blandrice
#   Description: disable server sync + behavior for custom movement
#   send plr position/vel to server manually
# ===================================================================
num tlastsync = 0;
num RATE = 25; # MIN 25ms / 40 msg per second
obj[] plrs = obj[];
obj self = {};
obj savestate = {};

num SIZENAME = 20;
num HALFSNAME = 10;


# interpolation
num newTime = 0;
num oldTime = 0;
num dataBuffer = 0;
num interpM = 0;

# walking on platforms
bool cr = false;
num MAXWALKSPEED = 0.04;
num tnow = 0;


action lerpPlrs(num delta) {
    interpM = Math.min(1.5, (g_tnow - newTime) / dataBuffer);
    for (num i = 0; i < lengthOf plrs; i++){
        obj plr = plrs[i];
        
        (num) plr.position.x += (Math.lerp((num)plr.oldpos.x, (num)plr.newpos.x, interpM)-(num)plr.position.x)*delta/1000*60/4;
        (num) plr.position.y += (Math.lerp((num)plr.oldpos.y, (num)plr.newpos.y, interpM)-(num)plr.position.y)*delta/1000*60/4;
        (num) plr.position.z += (Math.lerp((num)plr.oldpos.z, (num)plr.newpos.z, interpM)-(num)plr.position.z)*delta/1000*60/4;
        # (num) plr.rotation.x += (Math.lerp((num)plr.oldrot.x, (num)plr.newrot.x, interpM)-(num)plr.rotation.x)*delta/1000*60/4;
        (num) plr.rotation.x += (Math.lerp((num)plr.oldrot.x, (num)plr.newrot.x, interpM)-(num)plr.rotation.x)*delta/1000*60/4;
        # (num) plr.rotation.z += (Math.lerp((num)plr.oldrot.z, (num)plr.newrot.z, interpM)-(num)plr.rotation.z)*delta/1000*60/4;
    }
    
    
     
}

obj action findByUsername(str n){
    for (num i = 0; i < lengthOf plrs; i++){
        if (n == (str)plrs[i].username) {
            return plrs[i];
        }
    }
    return {};
}



obj action findById(str id){
    for (num i = 0; i < lengthOf plrs; i++){
        if (id == (str)plrs[i].id) {
            return plrs[i];
        }
    }
    return {};
}

action removeById(str id){
    for (num i = lengthOf plrs-1; i >= 0; i--){
        if (id == (str)plrs[i].id) {
            GAME.log("removing plr id",id);
            plrs[i].model.delete();
            remove plrs[i];
            return;
        }
    }
}

public action update(num delta){
    # num tnow = GAME.TIME.now();
    lerpPlrs(delta);
    if (plrutil_c_imspawned && (g_tnow - tlastsync> RATE)){
        self = GAME.PLAYERS.getSelf();
        if (notEmpty (obj)savestate.position){
            GAME.NETWORK.send("plrbhvr", {position:savestate.position,velocity:savestate.velocity,rotation:savestate.rotation});
            savestate = {};
        } else {
            GAME.NETWORK.send("plrbhvr", {position:self.position,velocity:self.velocity,rotation:self.rotation});
        }
        
        tlastsync = g_tnow;
    }
    for (num i = 0; i < lengthOf plrs;i++)
    {
        obj plr = plrs[i];
        plr.model.position.x = (num)plr.position.x;
        plr.model.position.y = (num)plr.position.y;
        plr.model.position.z = (num)plr.position.z;
        plr.model.rotation.y = (num)plr.rotation.x;
    }
}

public action onNetworkMessage(str id, obj data) {
    if (id == "plrs"){
        oldTime = newTime;
        newTime = g_tnow;
        dataBuffer = newTime - oldTime;

        obj[] netplrs = (obj[])data.plrs ;
        str[] leftplrs = (str[])data.left;
        for (num i = 0; i < lengthOf leftplrs;i++){
            obj usr = findById(leftplrs[i]);
            if ((str)usr.id!="undefined"){
                removeById((str)usr.id);
            }
        }
        for (num i = 0; i < lengthOf netplrs; i++){
            obj plrdata = netplrs[i];
            obj usr = findById((str)plrdata.id);
            # obj usr = findByUsername((str)plrdata.n);
            if ((str)usr.id!="undefined"){
                # GAME.log("usr found",usr);
                # usr.position.x = (num)plrdata.pos.x;
                # usr.position.y = (num)plrdata.pos.y+5;
                # usr.position.z = (num)plrdata.pos.z;
                # usr.rotation.x = (num)plrdata.rot.x;
                # usr.rotation.y = (num)plrdata.rot.y;

                usr.oldpos.x = (num) usr.newpos.x;
                usr.oldpos.y = (num) usr.newpos.y;
                usr.oldpos.z = (num) usr.newpos.z;

                usr.oldrot.x = (num) usr.newrot.x;
                usr.oldrot.y = (num) usr.newrot.y;

                usr.newpos.x = (num) plrdata.pos.x;
                usr.newpos.y = (num) plrdata.pos.y+5;
                usr.newpos.z = (num) plrdata.pos.z;
                usr.newrot.x = (num) plrdata.rot.x;
                usr.newrot.y = (num) plrdata.rot.y;



            } else if (((str)plrdata.id !=(str)self.id) && ((str)self.id!= "undefined")){
                GAME.log("new user",plrdata);
                # GAME.log("new user found. creating model");
                # GAME.log("usr",usr);
                # GAME.log("self",self);
                obj model = GAME.SCENE.addAsset("1326nesa",0,5,0 ,1,"#ffffff", {opacity:1});
                addTo plrs {
                    username:(str)plrdata.n,
                    id:(str)plrdata.id,
                    position:{
                        x :(num)plrdata.pos.x,
                        y :(num)plrdata.pos.y,
                        z :(num)plrdata.pos.z
                    },
                    rotation:{
                        x:(num)plrdata.rot.x,
                        y:(num)plrdata.rot.y
                    },
                    oldrot:{
                        x:(num)plrdata.rot.x,
                        y:(num)plrdata.rot.y
                    },
                    newrot:{
                        x:(num)plrdata.rot.x,
                        y:(num)plrdata.rot.y
                    },
                    oldpos: {
                        x :(num)plrdata.pos.x,
                        y :(num)plrdata.pos.y,
                        z :(num)plrdata.pos.z
                    },
                    newpos: {
                        x :(num)plrdata.pos.x,
                        y :(num)plrdata.pos.y,
                        z :(num)plrdata.pos.z
                    },
                    model:model
                };
            }
        }
    } else if (id == "clrplrs"){
        for (num i = lengthOf plrs - 1; i >= 0; i++){
            obj plr = plrs[i];
            plr.model.delete();
            remove plrs[i];
        }
    }
}


public action onPlayerSpawn(str id) {
    obj usr = findById(id);
    if ((str)usr.id!="undefined"){
        usr.model.opacity = 1;
    }
}
public action onPlayerDeath(str id, str killerID) {
    GAME.log("plr died",id);
    obj usr = findById(id);
    if ((str)usr.id!="undefined"){
        usr.model.opacity = 0;
    }
}

# public action onGameEnd(){
#     for (num i = lengthOf plrs - 1; i >= 0; i++){
#         obj plr = plrs[i];
#         plr.model.delete();
#         remove plrs[i];
#     }
# }

public action start(){
    self = GAME.PLAYERS.getSelf();
}

public action render(num delta){
    # obj[] plrs = GAME.PLAYERS.list();
    obj you = GAME.PLAYERS.getSelf();
	for (num i=0; i < lengthOf plrs; i++) {
		obj plr = plrs[i];
        if (100 > UTILS.getDist3D((num)you.position.x,(num)you.position.y,(num)you.position.z,(num)plr.position.x,(num)plr.position.y,(num)plr.position.z)) {
            obj pos = GAME.SCENE.posToScreen((num) plr.model.position.x, (num)plr.model.position.y+7, (num)plr.model.position.z);
            if ((bool)pos.onScreen){
                GAME.OVERLAY.drawText((str)plr.username, (num)pos.x-SIZENAME*2, (num)pos.y, 0, SIZENAME, "", "#FFFFFF", 1);
            }
        }	
	}
}

public action onPlayerUpdate(str id, num delta, obj inputs) {
    obj you = GAME.PLAYERS.getSelf();
    # GAME.log(you);
    if ((bool)you.onGround == true){
        savestate = {
            position:{
                x:(num)you.position.x,
                y:(num)you.position.y,
                z:(num)you.position.z
            },
            velocity:{
                x:(num)you.velocity.x,
                y:(num)you.velocity.y,
                z:(num)you.velocity.z
            },
            rotation:{
                x:(num)you.rotation.x,
                y:(num)you.rotation.y
            }
        };
    }

    tnow = g_tnow;
    cr = (bool)inputs.crouch;
    obj tPlr = GAME.PLAYERS.findByID(id);
    
    #currently collides with ALL objects
    if (notEmpty tPlr) {
        obj[] res = AABB_resolveplr(tPlr,cr,syncobjs_c_objlist);
        if ((str)tPlr.tOnObjIdle == "undefined"){
            tPlr.tOnObjIdle = 0;
        } 
        if ((str)tPlr.tOnObjMov == "undefined"){
            tPlr.tOnObjMov = 0;
        } 
        for (num i = 0; i < lengthOf res; i++){
            obj cdata = res[i];
            num colside = (num) cdata.colside;
            obj cobj = (obj)cdata.colobj;

            if (colside == AABB_YNEG){
                if ((str)inputs.movDir !="undefined"){
                    if ((num)tPlr.tOnObjMov == 0)
                    {
                        tPlr.tOnObjMov = tnow;
                        tPlr.tOnObjIdle = 0;
                    } 
                    num movDir = (num)inputs.movDir;
                    movDir -= ((num)inputs.mouseX);
                    # velocity relative to moving platform
                    if (Math.abs((num) cobj.velocity.x) > 0) {
                        tPlr.velocity.x = (num)cobj.velocity.x + (MAXWALKSPEED * Math.cos(movDir)) * (tnow-(num)tPlr.tOnObjMov)/((tnow-(num)tPlr.tOnObjMov)+100) ;
                    }
                    if (Math.abs((num) cobj.velocity.z) > 0) {
                        tPlr.velocity.z = (num)cobj.velocity.z + (MAXWALKSPEED * Math.sin(movDir)) * (tnow-(num)tPlr.tOnObjMov)/((tnow-(num)tPlr.tOnObjMov)+100) ;
                    }
                }
                else
                {
                    if ((num)tPlr.tOnObjIdle ==0) 
                    {
                        tPlr.tOnObjIdle = tnow;
                        tPlr.tOnObjMov = 0;
                    } 
                    # deccelerate relative to moving platform
                    if (Math.abs((num) cobj.velocity.x) > 0) {
                        (num) tPlr.velocity.x += ((num)cobj.velocity.x - (num)tPlr.velocity.x) * (tnow-(num)tPlr.tOnObjIdle)/((tnow-(num)tPlr.tOnObjIdle)+150);
                    } 
                    if (Math.abs((num) cobj.velocity.z) > 0) {
                        (num) tPlr.velocity.z += ((num)cobj.velocity.z - (num)tPlr.velocity.z) * (tnow-(num)tPlr.tOnObjIdle)/((tnow-(num)tPlr.tOnObjIdle)+150);
                    } 
                } 
            }   
        }
    }
}