{"name":"Test","ambient":"#97a0a8","light":"#f2f8fc","sky":"#dce8ed","fog":"#8d9aa0","fogD":2000,"xyz":[100,10,100],"objects":[{"p":[0,-10,0],"si":0}],"scripts":{"client":"","server":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgSGVhZGVyOiBcbGlic1x1dGlsc1xnbG9iYWxcZy5rcm5rCiMgQXV0aG9yOiBibGFuZHJpY2UKIyAgIERlc2NyaXB0aW9uOiBzb21lIGdsb2JhbCB2YXJzIHRoYXQgb3RoZXIgbGlicyBjYW4gcmVmZXJlbmNlIHRvIHJlZHVjZSBjYWxscwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCgpudW0gZ190bm93ID0gMDsKCmFjdGlvbiBnX3VwZGF0ZShudW0gZGVsdGEpewogICAgZ190bm93ID0gR0FNRS5USU1FLm5vdygpOwp9CiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEhlYWRlcjogXGxpYnNcZmxvYXRcZHR5cGVzLmtybmsKIyBBdXRob3I6IGJsYW5kcmljZQojICAgRGVzY3JpcHRpb246IGN1c3RvbSBmbG9hdCBkYXRhIHR5cGVzLS0+IGJpbmFyeSByZXByZXNlbnRhdGlvbiBjYWxjdWxhdGlvbnMuCiMgICBHb2FsIHdhcyB0byBwYWNrIGZsb2F0IGRhdGEgaW50byAxNi1iaXRzIGFuZCBzZW5kIG92ZXIgTmV0d29ya01lc3NhZ2UgCiMgICAobXVjaCBzbWFsbGVyIHRoYW4gQVNDSUkgc3RyaW5nIHJlcHJlc2VudGF0aW9uKQojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KbnVtIGFjdGlvbiBkdHlwZXNfZmluZE1TQkxvYyhudW0gdil7CgkjIHYgYmV0dGVyIGJlIGFuIGludGVnZXIgdSBkdW1ibwoJbnVtIHIgPSAtMTsKCSMgdiA9IHYgPj4gMTsKCXdoaWxlICh2ID4gMCkgewoJCXIrKzsKCQl2ID0gdiA+PiAxOwoJfQoJcmV0dXJuIHI7Cn0KbnVtIGFjdGlvbiBkdHlwZXNfZm1vZChudW0geCwgbnVtIHIpewoJcmV0dXJuIHggLSAocipNYXRoLmZsb29yKHggLyByKSk7CQp9CnN0ciBhY3Rpb24gZHR5cGVzX3ByaW50QmluYXJ5KG51bSBmKXsKCXN0ciByZXRzdHIgPSAiIjsKCWZvciAobnVtIGkgPSAzMi0xOyBpID49IDA7IGktLSkgewoJCXJldHN0ciArPSB0b1N0ciAoZiA+PiBpICYgMHgxKTsKCX0KCXJldHVybiByZXRzdHI7Cn0KbnVtIGFjdGlvbiBkdHlwZXNfb25lcyhudW0gZil7CgludW0gcmV0bnVtID0gMDsKCWZvciAobnVtIGkgPSAwOyBpIDwgZjsgaSsrKXsKCQlyZXRudW0gPSAocmV0bnVtIDw8IDEpIHwgMTsKCX0KCXJldHVybiByZXRudW07CQp9CgoKIyBhZGFwdGVkIGZyb20gSUVFRSA3NTQgU3RhbmRhcmQgZm9yIFNpbmdsZSBQcmVjaXNpb24gMzIgYml0IGZsb2F0aW5nCiMgYnV0IGFsbG93cyBmb3IgeW91IHRvIHNlbGVjdCAjIG9mIGV4cG9uZW50IC8gbWFudGlzc2EgYml0cwojIGhhbGYtcHJlY2lzaW9uICgxNiBiaXQpLCBzaW5nbGUtcHJlY2lzaW9uICgzMiBiaXQpCiMgbnVtIGR0eXBlc19NQVhfQklUUyA9IDMyOyBudW0gQklUU19FWFAgPSA4OwpudW0gZHR5cGVzX01BWF9CSVRTID0gMTY7IG51bSBCSVRTX0VYUCA9IDU7IAojZG9uJ3QgY2hhbmdlIHRvIHNvbWV0aGluZyBsaWtlIDE2LTMuLiBlcnJvciB1cCB0byAzMCB1bml0cyBvYnNlcnZlZAoKIyAoZS5nLiAzMi1iaXQpIGZyb20gbGVmdCB0byByaWdodDoKIyAxIGJpdCAtIFNpZ24gYml0ICgyJ3MgY29tcGxlbWVudCkgKz0gKC0xKSAqIDJecGxhY2UgaW4gZXhwb25lbnQKIyA4IGJpdHMgLSBFeHBvbmVudCAoMl5lKQojIDIzIGJpdHMgLSBNYW50aXNzYSAocGFydCBhZnRlciBkZWNpbWFsKQojIHJhbmdlID0gMl5CSVRTX0VYUCAKIyBwcmVjaXNpb24gPSAxLygyXmR0eXBlc19CSVRTX01BTlQpCgpudW0gZHR5cGVzX0JJQVMgPSAyKiooQklUU19FWFAtMSktMTsKbnVtIGR0eXBlc19CSVRTX01BTlQgPSBkdHlwZXNfTUFYX0JJVFMgLSAxIC0gQklUU19FWFA7Cm51bSBkdHlwZXNfU0lHTl9MT0MgPSBkdHlwZXNfTUFYX0JJVFMtMTsKCm51bSBhY3Rpb24gZHR5cGVzX251bVRvRmxvYXQxNihudW0gZGF0YSkgewoJIyAxLiBkZXRlcm1pbmUgdGhlIHNpZ24gYml0CgludW0gc2lnbmJpdCA9IDA7CglpZiAoZGF0YSA8IDApIHtzaWduYml0ID0gMTsgZGF0YSA9IC1kYXRhO30KICAgIGlmIChkYXRhID09IDApIHtyZXR1cm4gMDt9CgkjIDIuIENvbnZlcnQgIHdob2xlIC8gZGVjaW1hbCBiaXRzIHRvIHB1cmUgYmluYXJ5CgludW0gd2hvbGUgPSBNYXRoLmZsb29yKGRhdGEpOyAjIGZsb29yIGl0IHNvIGl0J3MganVzdCBhbiBpbnRlZ2VyICh3aWxsIGJlIGJldHdlZW4gMCBhbmQgMl5iaXRzZXhwKS4gbWF4IGlzIHRoZSAyIF4gYml0cyBvZiB0aGUgZXhwb25lbnQKCW51bSBkZWNpbWFsID0gKGRhdGEgLSB3aG9sZSA+IDApID8gZGF0YSAtIHdob2xlIDogMDsKCW51bSBkZWNiaXQgPSAweDAwMDsgCglmb3IgKG51bSBpID0gMDsgaSA8IGR0eXBlc19CSVRTX01BTlQ7IGkrKyl7ICMgY29udmVydCBkZWNpbWFscyBpbnRvIGJpbmFyeQoJCWRlY2ltYWwgKj0gMjsKCQludW0gdGRlY2JpdCA9IChkZWNpbWFsID49IDEgPyAxIDogMCk7CgkJZGVjYml0IHw9ICB0ZGVjYml0IDw8IChkdHlwZXNfQklUU19NQU5ULTEtaSk7ICMgMTIgLSBpIAoJCWlmIChkZWNpbWFsID49IDEpIHtkZWNpbWFsIC09MTt9Cgl9CgkJIyBHQU1FLmxvZygiZGVjYml0IixkdHlwZXNfcHJpbnRCaW5hcnkoZGVjYml0KSk7CgoJbnVtIHB1cmJpbmFyeSA9ICh3aG9sZSA8PCBkdHlwZXNfQklUU19NQU5UKSB8IGRlY2JpdDsKCQkjIEdBTUUubG9nKCJwdXJiaW5hcnkiLGR0eXBlc19wcmludEJpbmFyeShwdXJiaW5hcnkpKTsKCQkjIEdBTUUubG9nKCJkdHlwZXNfZmluZE1TQkxvYyhwdXJiaW5hcnkpIixkdHlwZXNfZmluZE1TQkxvYyhwdXJiaW5hcnkpKTsKCQoJIyAzLiBub3JtYWxpemUgdG8gZGV0ZXJtaW5lIG1hbnRpc3NhIGFuZCB1bmJpYXNlZCBleHBvbmVudAoJbnVtIHVuYmlhc2VkZXhwID0gZHR5cGVzX2ZpbmRNU0JMb2MocHVyYmluYXJ5KSAtIGR0eXBlc19CSVRTX01BTlQ7CgkJIyBHQU1FLmxvZygidW5iaWFzZWRleHAiLHVuYmlhc2VkZXhwKTsKCSMgNC4gZGV0ZXJtaW5lIGJpYXNlZCBleHBvbmVudAoJbnVtIGJpYXNlZGV4cCA9IHVuYmlhc2VkZXhwICsgZHR5cGVzX0JJQVM7CgkjIDUuIHJlbW92ZSBsZWFkaW5nIDEgKE1TQikKCQkjIGFsaWduIGZpcnN0CgludW0gbWFudGlzc2EgPSBwdXJiaW5hcnk7CgludW0gYWxpZ25tYW50aXNzYSA9IChkdHlwZXNfQklUU19NQU5ULTEpLWR0eXBlc19maW5kTVNCTG9jKG1hbnRpc3NhKTsKCWlmIChhbGlnbm1hbnRpc3NhID4gMCkgewoJCW1hbnRpc3NhID0gbWFudGlzc2EgPDwgYWxpZ25tYW50aXNzYTsKCX0gZWxzZSB7CgkJbWFudGlzc2EgPSBtYW50aXNzYSA+PiAoLTEgKiBhbGlnbm1hbnRpc3NhKTsKCX0KCW1hbnRpc3NhID0gKG1hbnRpc3NhIF4gKDEgPDwgKGR0eXBlc19maW5kTVNCTG9jKG1hbnRpc3NhKSkpKSA8PCAxOyAjIHJlbW92ZSBsZWFkaW5nIDEKCQkjIEdBTUUubG9nKCJtYW50aXNzYToiLGR0eXBlc19wcmludEJpbmFyeShtYW50aXNzYSkpOwoJCSMgR0FNRS5sb2coImxlZnQtc2hpZnQgYnk6IixhbGlnbm1hbnRpc3NhKTsJCgludW0gZmxvYXQxNiA9IChzaWduYml0IDw8IGR0eXBlc19TSUdOX0xPQykgfCAoYmlhc2VkZXhwIDw8IGR0eXBlc19CSVRTX01BTlQpIHwgKCBtYW50aXNzYSApOwoJcmV0dXJuIGZsb2F0MTY7Cn0KCm51bSBhY3Rpb24gZHR5cGVzX2Zsb2F0MTZUb051bShudW0gZikgewoJaWYgKGYgPT0gMCkge3JldHVybiAwO30KICAgICMgRGV0ZXJtaW5lIHNpZ24KCW51bSBzaWduID0gKCgoZiA+PiBkdHlwZXNfU0lHTl9MT0MpICYgMHgxKSA+IDApID8gLTEgOiAxOwoJIyBEZXRlcm1pbmUgZXhwb25lbnQgMiplIAoJbnVtIGV4cCA9IChmID4+IGR0eXBlc19CSVRTX01BTlQpICYgZHR5cGVzX29uZXMoQklUU19FWFApOyAKCWV4cCAtPSBkdHlwZXNfQklBUzsKCSMgQ29udmVydCBtYW50aXNzYSB0byBkZW5hcnkKCW51bSBtYW50aXNzYSA9IGYgJiBkdHlwZXNfb25lcyhkdHlwZXNfQklUU19NQU5UKTsKCSMgR0FNRS5sb2coIm1hbnRpc3NhOiAiLCBkdHlwZXNfcHJpbnRCaW5hcnkobWFudGlzc2EpKTsKCW51bSBtYW50ZGVuID0gMDsKCWZvciAobnVtIGkgPSBkdHlwZXNfZmluZE1TQkxvYyhtYW50aXNzYSk7IGkgPj0wIDsgaS0tKSB7CgkJbnVtIHRtYW4gPSAxLygyKiooZHR5cGVzX0JJVFNfTUFOVC1pKSkgKiAoKG1hbnRpc3NhID4+IGkpICYgMHgxKTsKCQltYW50ZGVuICs9IHRtYW47CgkJCgl9CgltYW50ZGVuICs9IDE7ICMgYWRkIDEgYmFjayAKCW51bSBSYWQgPSBzaWduICogbWFudGRlbiAqICgyICoqIGV4cCk7CglyZXR1cm4gUmFkOwp9CgpudW0gYWN0aW9uIGR0eXBlc19udW1Ub1VpbnQxNihudW0geCl7CglyZXR1cm4gKHggJiAweEZGRkYpOyAjIGNhcCA2NTUzNiAKfQoKbnVtIGFjdGlvbiBkdHlwZXNfbnVtVG9JbnQxNihudW0geCl7CgkjIHJldHVybiAoeCAmIDB4RkYpOyAjIGNhcCA2NTUzNiAKCW51bSByZXRudW0gPSAwOwoJeCA9IE1hdGgucm91bmQoeCk7Cgl4ID0gKHggPiAzMjc2NykgPyAzMjc2NyA6IHg7Cgl4ID0gKHggPCAtMzI3NjcpID8gLTMyNzY3IDogeDsKCSMgY2FwIHRvIGxhcmdlc3QgLyBzbWFsbGVzdCBpbnQgc2l6ZQoKCW51bSBzaWduID0geCA8IDAgPyAxIDogMDsKCglpZiAoc2lnbiA9PSAxKSB7CgkJeCA9IC14OwoJfQoJcmV0bnVtIHw9IHNpZ24gPDwgMTU7CgoJbnVtIGkgPSAxNDsgIyAxNSAtIDEKCXdoaWxlICh4ID4gMCkgewoJCWlmICh4IC8gKDIqKmkpID49IDEpIHsKCQkJcmV0bnVtIHw9ICAoMSA8PCBpKTsKCQkJeC09ICgyKippKTsKCQl9CgkJaS0tOwoJfQoJcmV0dXJuIHJldG51bTsKfQoKbnVtW10gYWN0aW9uIGR0eXBlc19udW1Ub191aW50MTZCeXRlQXJyYXkobnVtIGRhdGEpIHsKCWRhdGEgPSBNYXRoLnJvdW5kKGRhdGEpOwoJbnVtW10gcmV0QXJyYXkgPSBudW1bXTsKCWFkZFRvIHJldEFycmF5IChkYXRhID4+IDgpICYgMHhmZjsKCWFkZFRvIHJldEFycmF5IChkYXRhID4+IDApICYgMHhmZjsKCQoJcmV0dXJuIHJldEFycmF5OwoKfQoKbnVtIGFjdGlvbiBkdHlwZXNfbWVyZ2UyQnl0ZXMobnVtIGEsbnVtIGIpIHsKCXJldHVybiAoYiA8PCA4KSB8IGE7Cn0KCm51bSBhY3Rpb24gZHR5cGVzX0ludDE2VG9OdW0obnVtIGJpbikgewoJIyBudW0gYmluID0gKGIgPDwgMHhmZikgfCBhOwoJbnVtIHNpZ24gPSAoKGJpbiAmIDB4ODAwMCkgPiAwKSA/IC0xIDogMTsKCW51bSBkZW5hcnkgPSBiaW4gJiAweDdGRkY7CgoJcmV0dXJuIHNpZ24gKiBkZW5hcnk7Cn0KCiMgaW50IE51bWJlcnMgdG8gYnl0ZSBhcnJheQpudW1bXSBhY3Rpb24gZHR5cGVzX2ludDE2dG9CeXRlQXJyYXkobnVtIGRhdGEpewoJcmV0dXJuIG51bVsoKGRhdGEgPj4gMCkgJiAweGZmKSwoZGF0YSA+PiA4KSAmIDB4ZmZdOwp9CgpudW1bXSBhY3Rpb24gZHR5cGVzX0NvbG9yVG9CeXRlQXJyYXkobnVtIGNvbG9yKSB7CgludW1bXSByZXRBcnJheSA9IG51bVtdOwoJYWRkVG8gcmV0QXJyYXkgKGNvbG9yID4+IDApICYgMHhmZjsKCWFkZFRvIHJldEFycmF5IChjb2xvciA+PiA4KSAmIDB4ZmY7CglhZGRUbyByZXRBcnJheSAoY29sb3IgPj4gMTYpICYgMHhmZjsKCQoJcmV0dXJuIHJldEFycmF5Owp9CgpzdHJbXSBkdHlwZXNfbG9va3VwID0gc3RyWyIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIl07CgpzdHIgYWN0aW9uIGR0eXBlc19udW0yaGV4c3RyaW5nKG51bSBuKXsKCXN0ciBoZXhzdHIgPSAiIjsKCWZvciAobnVtIGkgPTA7IGkgPCA2OyBpKyspewoJCWhleHN0ciA9IGR0eXBlc19sb29rdXBbbiAmIDB4Rl0gKyBoZXhzdHI7CgkJbiA9IG4gPj4gNDsKCX0KCXJldHVybiBoZXhzdHI7Cn0KCm51bSBhY3Rpb24gZHR5cGVzX2hleHN0cmluZzJudW0oc3RyIGgpewoJbnVtIG4gPSAwOwoJaCA9IFVUSUxTLnRvVXBwZXIoaCk7Cglmb3IgKG51bSBpID0gMDsgaSA8IGxlbmd0aE9mIGg7IGkrKyl7CgkJZm9yIChudW0gaiA9IDA7IGogPCBsZW5ndGhPZiBkdHlwZXNfbG9va3VwOyBqKyspewoJCQlpZiAoZHR5cGVzX2xvb2t1cFtqXSA9PSBoW2ldKXsKCQkJCW4gfD0gaiA8PCAobGVuZ3RoT2YgaCAtIDEgLSBpKSo0OwoJCQkJYnJlYWs7CgkJCX0KCQl9Cgl9CglyZXR1cm4gbjsKfQoKbnVtIGFjdGlvbiBkdHlwZXNfY29uc3RyYWluUmFkaWFucyhudW0geCl7Cgl4ID0gZHR5cGVzX2Ztb2QoeCxNYXRoLlBJMik7CglpZiAoeCA8IDApewoJCXggKz0gMzYwOwoJfQogICAgcmV0dXJuIHg7Cn0KCgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBIZWFkZXI6IGI5MWVuY29kaW5nXGI5MS5rcm5rCiMgQXV0aG9yOiBTbHhUblQKIyBEZXNjcmlwdGlvbjogQmFzZTkxIGRlY29kaW5nIGNvbnZlcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9LdmFuVFRUL0Jhc2VOY29kaW5nCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKCm9iaiBiOTFfYmFzZTkxID0gewogICAgYWxwaGFiZXQ6ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSEjJCUmKCkqKywuLzo7PD0+P0BbXV5fYHt8fX4tIgp9OwoKIyBSZWN1cnNpb24gZHVlIHRvIGxvb3AgbGltaXRzCm51bSBhY3Rpb24gYjkxX2dldFZhbHVlKHN0ciBjLCBudW0gaW5kZXgpIHsKCWlmKGluZGV4ID49IGxlbmd0aE9mIGI5MV9iYXNlOTEuYWxwaGFiZXQpIHsKCQlyZXR1cm4gLTE7Cgl9CgkKCWlmKChzdHIpYjkxX2Jhc2U5MS5hbHBoYWJldFtpbmRleF0gPT0gYykgewoJCXJldHVybiBpbmRleDsKCX0KCQoJcmV0dXJuIGI5MV9nZXRWYWx1ZShjLCBpbmRleCArIDEpOwp9CgpudW1bXSBhY3Rpb24gYjkxX2RlY29kZShzdHIgZGF0YSkgewogICAgbnVtIGR2ID0gLTE7CiAgICBudW0gZG4gPSAwOwogICAgbnVtIGRicSA9IDA7CiAgICBudW1bXSByZXN1bHQgPSBudW1bXTsKCiAgICBmb3IobnVtIGkgPSAwOyBpIDwgbGVuZ3RoT2YgZGF0YTsgaSsrKSB7CiAgICAgICAgbnVtIGl2ID0gYjkxX2dldFZhbHVlKGRhdGFbaV0sIDApOwoKICAgICAgICBpZihpdiA9PSAtMSkgeyBjb250aW51ZTsgfQoKICAgICAgICBpZihkdiA9PSAtMSkgewogICAgICAgICAgICBkdiA9IGl2OyAKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGR2ICs9IGl2ICogOTE7CiAgICAgICAgICAgIGRicSB8PSAoZHYgPDwgZG4pOwoKICAgICAgICAgICAgaWYoKGR2ICYgODE5MSkgPiA4OCkgewogICAgICAgICAgICAgICAgZG4gKz0gMTM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBkbiArPSAxNDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBkbyAuLi4gd2hpbGU/CiAgICAgICAgICAgIGJvb2wgZmlyc3QgPSB0cnVlOwoKICAgICAgICAgICAgd2hpbGUoZmlyc3QgfHwgZG4gPiA3KSB7CiAgICAgICAgICAgICAgICBhZGRUbyByZXN1bHQgZGJxICUgMjU2OwogICAgICAgICAgICAgICAgZGJxID4+Pj0gODsKICAgICAgICAgICAgICAgIGRuIC09IDg7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGR2ID0gLTE7CiAgICAgICAgfQogICAgfQoKCWlmKGR2ICE9IC0xKSB7CgkJYWRkVG8gcmVzdWx0IChkYnEgfCBkdiA8PCBkbikgJiAyNTU7Cgl9CgoJcmV0dXJuIHJlc3VsdDsKfQoKIyBCZWluZyB1c2VkIHNlcnZlci1zaWRlCnN0ciBhY3Rpb24gYjkxX2VuY29kZShudW1bXSBkYXRhKSB7CiAgICBudW0gZW4gPSAwOwogICAgbnVtIGVicSA9IDA7CiAgICBzdHIgcmVzdWx0ID0gIiI7CgoJZm9yKG51bSBpID0gMDsgaSA8IGxlbmd0aE9mIGRhdGE7IGkrKykgewoJCWVicSB8PSAoZGF0YVtpXSAmIDI1NSkgPDwgZW47CgkJZW4gKz0gODsKCQkKCQlpZihlbiA+IDEzKSB7CgkJCW51bSBldiA9IGVicSAmIDgxOTE7CgkJCQoJCQlpZihldiA+IDg4KSB7CgkJCQllYnEgPj4+PSAxMzsKCQkJCWVuIC09IDEzOwoJCQl9CgkJCWVsc2UgewoJCQkJZXYgPSBlYnEgJiAxNjM4MzsKCQkJCWVicSA+Pj49IDE0OwoJCQkJZW4gLT0gMTQ7CgkJCX0KCQkJCgkJCW51bSBxdW90aWVudCA9IE1hdGguZmxvb3IoZXYgLyA5MSk7CgkJCW51bSByZW1haW5kZXIgPSBldiAlIDkxOwoJCQoJCQlyZXN1bHQgKz0gKHN0ciliOTFfYmFzZTkxLmFscGhhYmV0W3JlbWFpbmRlcl07CgkJCXJlc3VsdCArPSAoc3RyKWI5MV9iYXNlOTEuYWxwaGFiZXRbcXVvdGllbnRdOwoJCX0KCX0KCglpZihlbiA+IDApIHsKCQkJbnVtIHF1b3RpZW50ID0gTWF0aC5mbG9vcihlYnEgLyA5MSk7CgkJCW51bSByZW1haW5kZXIgPSBlYnEgJSA5MTsKCgkJCXJlc3VsdCArPSAoc3RyKWI5MV9iYXNlOTEuYWxwaGFiZXRbcmVtYWluZGVyXTsKCgkJCWlmKGVuID4gNyB8fCBlYnEgPiA5MCkgewoJCQkJcmVzdWx0ICs9IChzdHIpYjkxX2Jhc2U5MS5hbHBoYWJldFtxdW90aWVudF07CgkJCX0KCX0KCglyZXR1cm4gcmVzdWx0Owp9CiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEhlYWRlcjogXHN0cnV0aWxzXHN0cnV0aWxzLmtybmsKIyBBdXRob3I6IGJsYW5kcmljZSwgUHJvZk5vb2IgKHJlcGxhY2VhbGwpLCBNYW5pYU1hcHBlciAoU3BsaWNlKQojIERlc2NyaXB0aW9uOiBBZGRpdGlvbmFsIFN0cmluZyB1dGlsaXRpZXMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CnN0ciBhY3Rpb24gc3RydXRpbHNfdHJ1bmNhdGUoc3RyIHRleHQsIG51bSBsbikgewogICAgc3RyIHJldCA9ICIiOwogICAgZm9yIChudW0gaSA9IDA7IGkgPCBsbjsgaSsrKSB7CiAgICAgICAgcmV0ICs9IHRleHRbaV07CiAgICB9CiAgICByZXR1cm4gcmV0Owp9CgpzdHIgYWN0aW9uIHN0cnV0aWxzX3NwbGljZShzdHIgaW5wdXQsIG51bSBzdGFydCwgbnVtIGVuZCkgewogICAgbnVtIGNoYXJzTGVuID0gbGVuZ3RoT2YgaW5wdXQ7CiAgICBpZihjaGFyc0xlbiA9PSAwIHx8IHN0YXJ0ID49IGNoYXJzTGVuIHx8IHN0YXJ0ID49IGVuZCkgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIGlmKGVuZCA+IGNoYXJzTGVuKSB7CiAgICAgICAgZW5kID0gY2hhcnNMZW47CiAgICB9CiAgICBzdHIgb3V0cHV0ID0gJyc7CiAgICBmb3IobnVtIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7CiAgICAgICAgb3V0cHV0ICs9IGlucHV0W2ldOwogICAgfQogICAgcmV0dXJuIG91dHB1dDsKfQoKYm9vbCBhY3Rpb24gc3RydXRpbHNfc3RhcnRzKHN0ciB0ZXh0LHN0ciB2YWx1ZSkgewogICAgaWYgKFVUSUxTLnRleHRDb250YWlucyhzdHJ1dGlsc190cnVuY2F0ZSh0ZXh0LCBsZW5ndGhPZiB2YWx1ZSksIHZhbHVlKSkge3JldHVybiB0cnVlO30gCglyZXR1cm4gZmFsc2U7fQoKc3RyW10gYWN0aW9uIHN0cnV0aWxzX3NwbGl0KHN0ciBzLCBzdHIgZGVsaW0pIHsKCXN0cltdIG91dHB1dCA9IHN0cltdOwoJbnVtIGlkeF9tYXRjaHN0YXJ0ID0gMDsKCiAgICAjIGl0ZXJhdGUgb3ZlciBzdHJpbmcKICAgIGZvcihudW0gaSA9IDA7IGkgPCBsZW5ndGhPZiBzOyBpKyspIHsKICAgICAgICBib29sIG1hdGNoID0gZmFsc2U7CiAgICAgICAgCiAgICAgICAgIyBtYXRjaCBkZWxpbWl0ZXIKICAgICAgICBmb3IgKG51bSBqID0gMDsgaiA8IGxlbmd0aE9mIGRlbGltOyBqKyspIHsKCQkJbWF0Y2ggPSB0cnVlOwogICAgICAgICAgICBpZiAoc1tpK2pdICE9IGRlbGltW2pdKSB7CgkJCQltYXRjaCA9IGZhbHNlOyBicmVhazsKCQkJfQoJCX0KCiAgICAgICAgIyBtYXRjaGVzLCBwYXJzZSBvdXQgdGhlIHN0cmluZyBwcmV2aW91cwogICAgICAgIGlmIChtYXRjaCkgeyAKICAgICAgICAgICAgc3RyIHdvcmQgPSAiIjsKICAgICAgICAgICAgZm9yIChudW0gaiA9IGlkeF9tYXRjaHN0YXJ0OyBqIDwgaTsgaisrKSB7CiAgICAgICAgICAgICAgICB3b3JkICs9IHNbal07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWRkVG8gb3V0cHV0IHdvcmQ7CgogICAgICAgICAgICAjIHNraXAgZGVsaW1pdGVyCiAgICAgICAgICAgIGkgKz0gbGVuZ3RoT2YgZGVsaW0gLSAxOwogICAgICAgICAgICBpZHhfbWF0Y2hzdGFydCA9IGkrMTsKICAgICAgICB9CiAgICB9IAogICAgCiAgICAjIGFsc28gcGFyc2UgbGFzdCBzdHJpbmcKICAgIHN0ciB3b3JkID0gIiI7CiAgICBmb3IgKG51bSBpID0gaWR4X21hdGNoc3RhcnQ7IGkgPCBsZW5ndGhPZiBzOyBpKyspIHsKICAgICAgICB3b3JkICs9IHNbaV07CiAgICB9CiAgICBhZGRUbyBvdXRwdXQgd29yZDsKCglyZXR1cm4gb3V0cHV0Owp9CgpzdHIgYWN0aW9uIHN0cnV0aWxzX3JlcGxhY2VfYWxsKHN0ciBzdHJpbmcsIHN0ciB0b19yZXBsYWNlLCBzdHIgcmVwbGFjZV93aXRoKXsKICAgIHdoaWxlKFVUSUxTLnJlcGxhY2VUZXh0KHN0cmluZywgdG9fcmVwbGFjZSwgcmVwbGFjZV93aXRoKSAhPSBzdHJpbmcpewogICAgICAgIHN0cmluZyA9IFVUSUxTLnJlcGxhY2VUZXh0KHN0cmluZywgdG9fcmVwbGFjZSwgcmVwbGFjZV93aXRoKTsKICAgIH0KICAgIHJldHVybiBzdHJpbmc7Cn0KCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIEhlYWRlcjogbGlic1x1dGlsc1xsaXN0c1xsaXN0dXRpbC5rcm5rCiMgQXV0aG9yOiBibGFuZHJpY2UKIyBEZXNjcmlwdGlvbjogQWRkaXRpb25hbCBzdHJpbmcgdXRpbGl0aWVzCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKbnVtIGFjdGlvbiBsaXN0dXRpbF9taW5saXN0KG51bVtdIGxpc3QpewogICAgaWYgKGxlbmd0aE9mIGxpc3QgPiAyKXsKICAgICAgICBudW0gbWluID0gbGlzdFswXTsKICAgICAgICBmb3IgKG51bSBpID0gMTsgaSA8IGxlbmd0aE9mIGxpc3Q7IGkrKyl7CiAgICAgICAgICAgIG1pbiA9IChsaXN0W2ldIDwgbWluKSA/IGxpc3RbaV0gOiBtaW47CiAgICAgICAgfQoJCXJldHVybiBtaW47CiAgICB9IGVsc2UgaWYgKGxlbmd0aE9mIGxpc3QgPT0gMSl7CiAgICAgICAgcmV0dXJuIGxpc3RbMF07CiAgICB9CiAgICBlbHNlIGlmIChsZW5ndGhPZiBsaXN0ID09IDIpIHsKICAgICAgICByZXR1cm4gTWF0aC5taW4obGlzdFswXSxsaXN0WzFdKTsKICAgIH0KICAgIHJldHVybiAwOwp9Cgpib29sIGFjdGlvbiBsaXN0dXRpbF9pbnN0cmxpc3Qoc3RyIHMsIHN0cltdIGxpc3QpewogICAgZm9yKG51bSBpID0gMDsgaSA8IGxlbmd0aE9mIGxpc3Q7IGkrKyl7CiAgICAgICAgaWYgKHMgPT0gbGlzdFtpXSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7Cn0KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgaGVhZGVyOiBcbGlic1xzeW5jb2Jqc1xzeW5jb2Jqc19oLmtybmsKIyBBdXRob3I6IGJsYW5kcmljZQojICAgRGVzY3JpcHRpb246IG5vdCByZWFkeSEKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojIEJpbmFyeSBkZWNvZGluZyBvZiBhbiBhcnJheSBvZiBieXRlcyB0byBPYmplY3RzCm9iaiBhY3Rpb24gc3luY29ianNfaF9ieXRlQXJyYXlUb09ianMobnVtW10gYnl0ZUFycmF5KSB7CglvYmpbXSBvYmpsaXN0ID0gb2JqW107CgludW1bXSBkZWxMaXN0ID0gbnVtW107CgludW0gaSA9IDA7CgludW0gaiA9IDA7CgludW0gdG90YWxvYmpzID0gMDsKCW51bSB0b3RhbGRlbG9ianMgPSAwOwoJaWYgKGxlbmd0aE9mIGJ5dGVBcnJheSA+PTIpCgl7CiAgICAgICAgdG90YWxvYmpzID0gYnl0ZUFycmF5WzBdOwogICAgICAgIGkrKzsKCQl0b3RhbGRlbG9ianMgPSBieXRlQXJyYXlbMV07CgkJaSsrOwogICAgfSBlbHNlCgl7CiAgICAgICAgcmV0dXJuIG9iamxpc3Q7CiAgICB9CgkKCXdoaWxlIChqIDwgdG90YWxvYmpzKXsKCQlvYmogdG9iaiA9IHt9OwoJCSMgY29udGVudHMgYnl0ZQoJCW51bSBjb250ZW50cyA9IGJ5dGVBcnJheVtpXTsKCQlpKys7CgkJIyBvYmplY3QgaWQgMiBieXRlcwoJCXRvYmoub2JqaWQgPSBkdHlwZXNfbWVyZ2UyQnl0ZXMoYnl0ZUFycmF5W2ldLGJ5dGVBcnJheVtpKzFdKTsKCQlpKz0yOwoJCSMgNCBieXRlcyBoZWFsdGggLyBmdWxsaGVhbHRoCgkJaWYgKChjb250ZW50cyAmIDB4NDApID4gMCkgewoJCQl0b2JqLmhlYWx0aCA9IGR0eXBlc19tZXJnZTJCeXRlcyhieXRlQXJyYXlbaV0sYnl0ZUFycmF5W2krMV0pOwoJCQl0b2JqLmZoZWFsdGggPSBkdHlwZXNfbWVyZ2UyQnl0ZXMoYnl0ZUFycmF5W2krMl0sYnl0ZUFycmF5W2krM10pOwoJCQlpKz0gNDsKCQl9CgkJIyA2IGJ5dGVzIHBvc2l0aW9uCgkJaWYgKChjb250ZW50cyAmIDB4MjApID4gMCl7CgkJCXRvYmoucG9zaXRpb24gPSB7CgkJCQl4IDogZHR5cGVzX0ludDE2VG9OdW0oZHR5cGVzX21lcmdlMkJ5dGVzKGJ5dGVBcnJheVtpXSxieXRlQXJyYXlbaSsxXSkpLAoJCQkJeSA6IGR0eXBlc19JbnQxNlRvTnVtKGR0eXBlc19tZXJnZTJCeXRlcyhieXRlQXJyYXlbaSsyXSxieXRlQXJyYXlbaSszXSkpLAoJCQkJeiA6IGR0eXBlc19JbnQxNlRvTnVtKGR0eXBlc19tZXJnZTJCeXRlcyhieXRlQXJyYXlbaSs0XSxieXRlQXJyYXlbaSs1XSkpCgkJCX07CgkJCWkrPSA2OwoJCX0KCQkjIDYgYnl0ZXMgcm90YXRpb24KCQlpZiAoKGNvbnRlbnRzICYgMHgxMCkgPiAwKSB7CgkJCXRvYmoucm90YXRpb24gPXsKCQkJCXg6IGR0eXBlc19mbG9hdDE2VG9OdW0oZHR5cGVzX21lcmdlMkJ5dGVzKGJ5dGVBcnJheVtpXSxieXRlQXJyYXlbaSsxXSkpLAoJCQkJeTogZHR5cGVzX2Zsb2F0MTZUb051bShkdHlwZXNfbWVyZ2UyQnl0ZXMoYnl0ZUFycmF5W2krMl0sYnl0ZUFycmF5W2krM10pKSwKCQkJCXo6IGR0eXBlc19mbG9hdDE2VG9OdW0oZHR5cGVzX21lcmdlMkJ5dGVzKGJ5dGVBcnJheVtpKzRdLGJ5dGVBcnJheVtpKzVdKSkKCQkJfTsKCQkJaSs9IDY7CgkJfQoJCSMgNiBieXRlcyBzY2FsZQoJCWlmICgoY29udGVudHMgJiAweDA4KSA+IDApIHsKCQkJdG9iai5zY2FsZSA9IHsKCQkJCXg6IGR0eXBlc19JbnQxNlRvTnVtKGR0eXBlc19tZXJnZTJCeXRlcyhieXRlQXJyYXlbaV0sYnl0ZUFycmF5W2krMV0pKSwKCQkJCXk6IGR0eXBlc19JbnQxNlRvTnVtKGR0eXBlc19tZXJnZTJCeXRlcyhieXRlQXJyYXlbaSsyXSxieXRlQXJyYXlbaSszXSkpLAoJCQkJejogZHR5cGVzX0ludDE2VG9OdW0oZHR5cGVzX21lcmdlMkJ5dGVzKGJ5dGVBcnJheVtpKzRdLGJ5dGVBcnJheVtpKzVdKSkKCQkJfTsKCQkJaSs9IDY7CgkJfQoJCSMgNyBieXRlcyBkZXRhaWxzICgyIHR5cGUsIDIgdGV4dHVyZSwgMyBjb2xvcikKCQlpZiAoKGNvbnRlbnRzICYgMHgwNCkgPiAwKSB7CgkJCXRvYmoudHlwZSA9IGR0eXBlc19tZXJnZTJCeXRlcyhieXRlQXJyYXlbaV0sYnl0ZUFycmF5W2krMV0pOwogICAgICAgICAgICBpKz0yOwoJCX0KICAgICAgICBpZiAoKGNvbnRlbnRzICYgMHgwMikgPiAwKSB7CgkJCXRvYmouYWlkID0gZHR5cGVzX21lcmdlMkJ5dGVzKGJ5dGVBcnJheVtpXSxieXRlQXJyYXlbaSsxXSk7CiAgICAgICAgICAgIGkrPTI7CgkJfQogICAgICAgIGlmICgoY29udGVudHMgJiAweDAxKSA+IDApIHsKCQkJdG9iai5jb2xvciA9IGJ5dGVBcnJheVtpXSB8IChieXRlQXJyYXlbaSsxXSA8PCA4KSB8IChieXRlQXJyYXlbaSsyXSA8PCAxNik7CiAgICAgICAgICAgIGkrPTM7CgkJfQogICAgICAgIGlmICgoY29udGVudHMgJiAweDgwKSA+IDApIHsKCQkJdG9iai5lbWlzc2l2ZSA9IGJ5dGVBcnJheVtpXSB8IChieXRlQXJyYXlbaSsxXSA8PCA4KSB8IChieXRlQXJyYXlbaSsyXSA8PCAxNik7CiAgICAgICAgICAgIGkrPTM7CgkJfQogICAgICAgIAoJCWFkZFRvIG9iamxpc3QgdG9iajsKCQlqKys7Cgl9Cglmb3IgKG51bSBrID0gMDsgayA8IHRvdGFsZGVsb2JqczsgaysrKXsKCQlhZGRUbyBkZWxMaXN0IGJ5dGVBcnJheVtpK2tdOwoJCSMgR0FNRS5sb2coIm5ldyBkZWxldGUgb2JqZWN0IHdpdGggaWQiLGJ5dGVBcnJheVtpK2tdKTsKCQlpKys7CgkJCgl9CgoKCXJldHVybiB7b2JqbGlzdDpvYmpsaXN0LGRlbExpc3Q6ZGVsTGlzdH07Cn0KCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIExpYnJhcnk6IFxsaWJzXHN5bmNvYmpzXHN5bmNvYmpzX3Mua3JuawojIEF1dGhvcjogYmxhbmRyaWNlCiMgICBEZXNjcmlwdGlvbjogbm90IHJlYWR5IQojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCm51bSBzeW5jb2Jqc19zX1NZTkNfSU5URVJWQUwgPSA1MDsKbnVtIHN5bmNvYmpzX3NfREVTSVJFRF9GUFMgPSA1OwpudW0gc3luY29ianNfc19NQVhMRU5fTkVUREFUQSA9IDE1MDA7CgojIG9iamVjdCBjb250ZW50cwpudW1bXSBhY3Rpb24gc3luY29ianNfc19vYmpzVG9CeXRlQXJyYXkob2JqW10gc3luY29ianNfc19vYmpsaXN0LGJvb2wgcmVzZXQsIG9iaiBwbHIsIG9ialtdIHBscnMpIHsKCW51bVtdIHJldEFycmF5ID0gbnVtW107CiAgICBudW1bXSBkZWxBcnJheSA9IG51bVtdOwogICAgbnVtIHRvdGFsb2JqcyA9IDA7CgogICAgIyAxIGJ5dGUgbGVuZ3RoIG9mIG9iamVjdHMKICAgIGFkZFRvIHJldEFycmF5IDA7CgogICAgIyAxIGJ5dGUgbGVuZ3RoIG9mIGRlbCBsaXN0CiAgICBhZGRUbyByZXRBcnJheSAwOwoKCWZvciAobnVtIGkgPSAwOyBpIDwgbGVuZ3RoT2Ygc3luY29ianNfc19vYmpsaXN0OyBpKyspIHsKCQlvYmogdE9iaiA9IHN5bmNvYmpzX3Nfb2JqbGlzdFtpXTsKICAgICAgICBpZiAoKHN0cil0T2JqLmRlbCAhPSAidW5kZWZpbmVkIiAmJiAoYm9vbCl0T2JqLmRlbCA9PSB0cnVlKXsKICAgICAgICAgICAgaWYgKCFsaXN0dXRpbF9pbnN0cmxpc3QoKHN0cilwbHIuaWQsKHN0cltdKXRPYmouZGVscGxyaWRzKSl7CiAgICAgICAgICAgICAgICBhZGRUbyAoc3RyW10pdE9iai5kZWxwbHJpZHMgKHN0cilwbHIuaWQ7CiAgICAgICAgICAgICAgICBhZGRUbyBkZWxBcnJheSB0b051bSAoc3RyKSB0T2JqLm9iamlkOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgIHRvdGFsb2JqcysrOwogICAgICAgIH0KCgkJbnVtW10gdEFycmF5ID0gbnVtW107CgoJCSMgMSBieXRlICg4Yml0cykgb2JqZWN0IGNvbnRlbnRzCgkJbnVtIGNvbnRlbnRzID0gMHgwMDsKCQludW0gY29udGVudHNpZHggPSBsZW5ndGhPZiByZXRBcnJheTsKCQlhZGRUbyByZXRBcnJheSBjb250ZW50czsKCQkjIGlmICgobnVtKSB0T2JqLmhpdD4wKSB7Y29udGVudHMgfD0gIDB4ODA7fQoJCQoJCSMgMiBieXRlcyBzeW5jb2Jqc19zX29iamlkCgkJdEFycmF5ID0gZHR5cGVzX2ludDE2dG9CeXRlQXJyYXkoZHR5cGVzX251bVRvVWludDE2KChudW0pdE9iai5vYmppZCkpOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMF07IGFkZFRvIHJldEFycmF5IHRBcnJheVsxXTsKCgkJIyA0IGJ5dGVzIGhlYWx0aC9maGVhbHRoCgkJaWYgKG5vdEVtcHR5IChvYmopIHRPYmouaGVhbHRoKSB7CiAgICAgICAgICAgICAgICBib29sIGhlYWx0aGNoYW5nZWQgPSAoKG51bSkgdE9iai5oZWFsdGguaCAhPSAobnVtKSB0T2JqLmhlYWx0aF9vbGQuaCkgfHwgKChudW0pIHRPYmouaGVhbHRoLmZoICE9IChudW0pIHRPYmouaGVhbHRoX29sZC5maCk7CiAgICAgICAgICAgICAgICBpZiAoaGVhbHRoY2hhbmdlZCl7CiAgICAgICAgICAgICAgICAgICAgdE9iai5oZWFsdGhfb2xkID0gc3RyW107CiAgICAgICAgICAgICAgICAgICAgdE9iai5oZWFsdGhfb2xkID0ge3g6dE9iai5oZWFsdGguaCx5OnRPYmouaGVhbHRoLmZofTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChoZWFsdGhjaGFuZ2VkIHx8ICgoIWxpc3R1dGlsX2luc3RybGlzdCgoc3RyKXBsci5pZCwoc3RyW10pdE9iai5oZWFsdGhfb2xkX3BscnMpKSkgfHwgcmVzZXQpIHsKICAgICAgICAgICAgICAgICAgICBjb250ZW50cyB8PSAgMHg0MDsKICAgICAgICAgICAgICAgICAgICB0QXJyYXkgPSBkdHlwZXNfaW50MTZ0b0J5dGVBcnJheShkdHlwZXNfbnVtVG9VaW50MTYoKG51bSl0T2JqLmhlYWx0aC5oKSk7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOwogICAgICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19pbnQxNnRvQnl0ZUFycmF5KGR0eXBlc19udW1Ub1VpbnQxNigobnVtKXRPYmouaGVhbHRoLmZoKSk7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOwogICAgICAgICAgICAgICAgICAgIGFkZFRvICAoc3RyW10pIHRPYmouaGVhbHRoX29sZF9wbHJzIChzdHIpcGxyLmlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgkJIyA2IGJ5dGVzIHBvc2l0aW9uCgkJIyBpZiAobm90RW1wdHkgKG9iaikgdE9iai5wb3NpdGlvbikge30KICAgICAgICBpZiAobm90RW1wdHkgKG9iaikgdE9iai5wb3NpdGlvbikgewogICAgICAgICAgICBib29sIHBvc2NoYW5nZWQgPSAoKG51bSkgdE9iai5wb3NpdGlvbi54ICE9IChudW0pIHRPYmoucG9zX29sZC54KSB8fCAoKG51bSkgdE9iai5wb3NpdGlvbi55ICE9IChudW0pIHRPYmoucG9zX29sZC55KSAgfHwgKChudW0pIHRPYmoucG9zaXRpb24ueiAhPSAobnVtKSB0T2JqLnBvc19vbGQueik7CiAgICAgICAgICAgIGlmIChwb3NjaGFuZ2VkKXsKICAgICAgICAgICAgICAgIHRPYmoucG9zX29sZF9wbHJzID0gc3RyW107CiAgICAgICAgICAgICAgICB0T2JqLnBvc19vbGQgPSB7eDp0T2JqLnBvc2l0aW9uLngseTp0T2JqLnBvc2l0aW9uLnksejp0T2JqLnBvc2l0aW9uLnp9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwb3NjaGFuZ2VkIHx8ICgoIWxpc3R1dGlsX2luc3RybGlzdCgoc3RyKXBsci5pZCwoc3RyW10pdE9iai5wb3Nfb2xkX3BscnMpKSkgfHwgcmVzZXQpewogICAgICAgICAgICAgICAgY29udGVudHMgfD0gIDB4MjA7CiAgICAgICAgICAgICAgICB0QXJyYXkgPSBkdHlwZXNfaW50MTZ0b0J5dGVBcnJheShkdHlwZXNfbnVtVG9JbnQxNigobnVtKXRPYmoucG9zaXRpb24ueCkpOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMF07IGFkZFRvIHJldEFycmF5IHRBcnJheVsxXTsKICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19pbnQxNnRvQnl0ZUFycmF5KGR0eXBlc19udW1Ub0ludDE2KChudW0pdE9iai5wb3NpdGlvbi55KSk7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOwogICAgICAgICAgICAgICAgdEFycmF5ID0gZHR5cGVzX2ludDE2dG9CeXRlQXJyYXkoZHR5cGVzX251bVRvSW50MTYoKG51bSl0T2JqLnBvc2l0aW9uLnopKTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzBdOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMV07CiAgICAgICAgICAgICAgICBhZGRUbyAgKHN0cltdKSB0T2JqLnBvc19vbGRfcGxycyAoc3RyKXBsci5pZDsKICAgICAgICAgICAgfQoJCX0KCQkjIDYgYnl0ZXMgcm90YXRpb24KCQlpZiAobm90RW1wdHkgKG9iaikgdE9iai5yb3RhdGlvbikgewogICAgICAgICAgICBib29sIHJvdGNoYW5nZWQgPSAoKG51bSkgdE9iai5yb3RhdGlvbi54ICE9IChudW0pIHRPYmoucm90X29sZC54KSB8fCAoKG51bSkgdE9iai5yb3RhdGlvbi55ICE9IChudW0pIHRPYmoucm90X29sZC55KSAgfHwgKChudW0pIHRPYmoucm90YXRpb24ueiAhPSAobnVtKSB0T2JqLnJvdF9vbGQueik7CiAgICAgICAgICAgIGlmIChyb3RjaGFuZ2VkKXsKICAgICAgICAgICAgICAgIHRPYmoucm90X29sZF9wbHJzID0gc3RyW107CiAgICAgICAgICAgICAgICB0T2JqLnJvdF9vbGQgPSB7eDp0T2JqLnJvdGF0aW9uLngseTp0T2JqLnJvdGF0aW9uLnksejp0T2JqLnJvdGF0aW9uLnp9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyb3RjaGFuZ2VkIHx8ICgoIWxpc3R1dGlsX2luc3RybGlzdCgoc3RyKXBsci5pZCwoc3RyW10pdE9iai5yb3Rfb2xkX3BscnMpKSkgfHwgcmVzZXQpewogICAgICAgICAgICAgICAgY29udGVudHMgfD0gIDB4MTA7CiAgICAgICAgICAgICAgICB0QXJyYXkgPSBkdHlwZXNfaW50MTZ0b0J5dGVBcnJheShkdHlwZXNfbnVtVG9GbG9hdDE2KChudW0pdE9iai5yb3RhdGlvbi54KSk7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOwogICAgICAgICAgICAgICAgIyBHQU1FLmxvZygieDogIixkdHlwZXNfbnVtVG9GbG9hdDE2KChudW0pdE9iai5yb3RhdGlvbi54KSwgcHJpbnRCaW5hcnkoZHR5cGVzX251bVRvRmxvYXQxNigobnVtKXRPYmoucm90YXRpb24ueCkpKTsKICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19pbnQxNnRvQnl0ZUFycmF5KGR0eXBlc19udW1Ub0Zsb2F0MTYoKG51bSl0T2JqLnJvdGF0aW9uLnkpKTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzBdOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMV07CiAgICAgICAgICAgICAgICB0QXJyYXkgPSBkdHlwZXNfaW50MTZ0b0J5dGVBcnJheShkdHlwZXNfbnVtVG9GbG9hdDE2KChudW0pdE9iai5yb3RhdGlvbi56KSk7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOwogICAgICAgICAgICAgICAgYWRkVG8gIChzdHJbXSkgdE9iai5yb3Rfb2xkX3BscnMgKHN0cilwbHIuaWQ7CiAgICAgICAgICAgIH0KCQl9CgkJIyA2IGJ5dGVzIHNjYWxlCgkJaWYgKG5vdEVtcHR5IChvYmopIHRPYmouc2NhbGUpIHsKICAgICAgICAgICAgYm9vbCBzY2FsZWNoYW5nZWQgPSAoKG51bSkgdE9iai5zY2FsZS54ICE9IChudW0pIHRPYmouc2NhbGVfb2xkLngpIHx8ICgobnVtKSB0T2JqLnNjYWxlLnkgIT0gKG51bSkgdE9iai5zY2FsZV9vbGQueSkgIHx8ICgobnVtKSB0T2JqLnNjYWxlLnogIT0gKG51bSkgdE9iai5zY2FsZV9vbGQueik7CiAgICAgICAgICAgIGlmIChzY2FsZWNoYW5nZWQpewogICAgICAgICAgICAgICAgdE9iai5zY2FsZV9vbGRfcGxycyA9IHN0cltdOwogICAgICAgICAgICAgICAgdE9iai5zY2FsZV9vbGQgPSB7eDp0T2JqLnNjYWxlLngseTp0T2JqLnNjYWxlLnksejp0T2JqLnNjYWxlLnp9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzY2FsZWNoYW5nZWQgfHwgKCghbGlzdHV0aWxfaW5zdHJsaXN0KChzdHIpcGxyLmlkLChzdHJbXSl0T2JqLnNjYWxlX29sZF9wbHJzKSkpIHx8IHJlc2V0KXsKICAgICAgICAgICAgICAgIGNvbnRlbnRzIHw9ICAweDA4OwogICAgICAgICAgICAgICAgdEFycmF5ID0gZHR5cGVzX2ludDE2dG9CeXRlQXJyYXkoZHR5cGVzX251bVRvSW50MTYoKG51bSl0T2JqLnNjYWxlLngpKTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzBdOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMV07CiAgICAgICAgICAgICAgICB0QXJyYXkgPSBkdHlwZXNfaW50MTZ0b0J5dGVBcnJheShkdHlwZXNfbnVtVG9JbnQxNigobnVtKXRPYmouc2NhbGUueSkpOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMF07IGFkZFRvIHJldEFycmF5IHRBcnJheVsxXTsKICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19pbnQxNnRvQnl0ZUFycmF5KGR0eXBlc19udW1Ub0ludDE2KChudW0pdE9iai5zY2FsZS56KSk7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOwogICAgICAgICAgICAgICAgYWRkVG8gIChzdHJbXSkgdE9iai5zY2FsZV9vbGRfcGxycyAoc3RyKXBsci5pZDsKICAgICAgICAgICAgfQoJCX0KICAgICAgICAjIDcgYnl0ZXMgZGV0YWlscyAoMiB0eXBlLCAyIHRleHR1cmUsIDMgY29sb3IpCiAgICAgICAgIyB0eXBlIChjdWJlLCBzcGhlcmUsIHNwcml0ZSwgbW9kZWxJRCkKICAgICAgICBpZiAoKHN0cil0T2JqLnR5cGUgIT0gInVuZGVmaW5lZCIpCiAgICAgICAgeyAgIAogICAgICAgICAgICBib29sIHR5cGVjaGFuZ2VkID0gKChudW0pIHRPYmoudHlwZSAhPSAobnVtKSB0T2JqLnR5cGVfb2xkKTsKICAgICAgICAgICAgaWYgKHR5cGVjaGFuZ2VkKXsKICAgICAgICAgICAgICAgIHRPYmoudHlwZV9vbGRfcGxycyA9IHN0cltdOwogICAgICAgICAgICAgICAgdE9iai50eXBlX29sZCA9IChudW0pdE9iai50eXBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlY2hhbmdlZCB8fCAoKCFsaXN0dXRpbF9pbnN0cmxpc3QoKHN0cilwbHIuaWQsKHN0cltdKXRPYmoudHlwZV9vbGRfcGxycykpKSB8fCByZXNldCl7CiAgICAgICAgICAgICAgICBjb250ZW50cyB8PSAgMHgwNDsKICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19pbnQxNnRvQnl0ZUFycmF5KChudW0pdE9iai50eXBlKTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzBdOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMV07ICAgIAogICAgICAgICAgICAgICAgYWRkVG8gIChzdHJbXSkgdE9iai50eXBlX29sZF9wbHJzIChzdHIpcGxyLmlkOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICMgYWlkICh0ZXh0dXJlKSBDQU5OT1QgQkUgVVBEQVRFRCBZRVQgSU4gS1MKICAgICAgICBpZiAoKHN0cil0T2JqLmFpZCE9InVuZGVmaW5lZCIpewogICAgICAgICAgICBib29sIGFpZF9jaGFuZ2VkID0gKChudW0pIHRPYmouYWlkICE9IChudW0pIHRPYmouYWlkX29sZCk7CiAgICAgICAgICAgIGlmIChhaWRfY2hhbmdlZCl7CiAgICAgICAgICAgICAgICB0T2JqLmFpZF9vbGRfcGxycyA9IHN0cltdOwogICAgICAgICAgICAgICAgdE9iai5haWRfb2xkID0gKG51bSl0T2JqLmFpZDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYWlkX2NoYW5nZWQgfHwgKCghbGlzdHV0aWxfaW5zdHJsaXN0KChzdHIpcGxyLmlkLChzdHJbXSl0T2JqLmFpZF9vbGRfcGxycykpKSB8fCByZXNldCl7CiAgICAgICAgICAgICAgICBjb250ZW50cyB8PSAgMHgwMjsKICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19pbnQxNnRvQnl0ZUFycmF5KChudW0pdE9iai5haWQpOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMF07IGFkZFRvIHJldEFycmF5IHRBcnJheVsxXTsgICAgCiAgICAgICAgICAgICAgICBhZGRUbyAgKHN0cltdKSB0T2JqLmFpZF9vbGRfcGxycyAoc3RyKXBsci5pZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgIyBjb2xvcgoJCWlmICgoc3RyKSB0T2JqLmNvbG9yICE9InVuZGVmaW5lZCIpewogICAgICAgICAgICBib29sIGNvbG9yX2NoYW5nZWQgPSAoKG51bSkgdE9iai5jb2xvciAhPSAobnVtKSB0T2JqLmNvbG9yX29sZCk7CiAgICAgICAgICAgIGlmIChjb2xvcl9jaGFuZ2VkKXsKICAgICAgICAgICAgICAgIHRPYmouY29sb3Jfb2xkX3BscnMgPSBzdHJbXTsKICAgICAgICAgICAgICAgIHRPYmouY29sb3Jfb2xkID0gKG51bSl0T2JqLmNvbG9yOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjb2xvcl9jaGFuZ2VkIHx8ICgoIWxpc3R1dGlsX2luc3RybGlzdCgoc3RyKXBsci5pZCwoc3RyW10pdE9iai5jb2xvcl9vbGRfcGxycykpKSB8fCByZXNldCl7CiAgICAgICAgICAgICAgICBjb250ZW50cyB8PSAgMHgwMTsKICAgICAgICAgICAgICAgIHRBcnJheSA9IGR0eXBlc19Db2xvclRvQnl0ZUFycmF5KChudW0pdE9iai5jb2xvcik7IGFkZFRvIHJldEFycmF5IHRBcnJheVswXTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzFdOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMl07CiAgICAgICAgICAgICAgICBhZGRUbyAgKHN0cltdKSB0T2JqLmNvbG9yX29sZF9wbHJzIChzdHIpcGxyLmlkOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICMgZW1pc3NpdmUKCQlpZiAoKHN0cikgdE9iai5lbWlzc2l2ZSAhPSJ1bmRlZmluZWQiKXsKICAgICAgICAgICAgYm9vbCBlbWlzc2l2ZV9jaGFuZ2VkID0gKChudW0pIHRPYmouZW1pc3NpdmUgIT0gKG51bSkgdE9iai5lbWlzc2l2ZV9vbGQpOwogICAgICAgICAgICBpZiAoZW1pc3NpdmVfY2hhbmdlZCl7CiAgICAgICAgICAgICAgICBzdHIgY29sciA9ICIjIiArIGR0eXBlc19udW0yaGV4c3RyaW5nKChudW0pIHRPYmouZW1pc3NpdmUpOwogICAgICAgICAgICAgICAgdE9iai5lbWlzc2l2ZV9vbGRfcGxycyA9IHN0cltdOwogICAgICAgICAgICAgICAgdE9iai5lbWlzc2l2ZV9vbGQgPSAobnVtKXRPYmouZW1pc3NpdmU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGVtaXNzaXZlX2NoYW5nZWQgfHwgKCghbGlzdHV0aWxfaW5zdHJsaXN0KChzdHIpcGxyLmlkLChzdHJbXSl0T2JqLmVtaXNzaXZlX29sZF9wbHJzKSkpIHx8IHJlc2V0KXsKICAgICAgICAgICAgICAgIGNvbnRlbnRzIHw9ICAweDgwOwogICAgICAgICAgICAgICAgdEFycmF5ID0gZHR5cGVzX0NvbG9yVG9CeXRlQXJyYXkoKG51bSl0T2JqLmVtaXNzaXZlKTsgYWRkVG8gcmV0QXJyYXkgdEFycmF5WzBdOyBhZGRUbyByZXRBcnJheSB0QXJyYXlbMV07IGFkZFRvIHJldEFycmF5IHRBcnJheVsyXTsKICAgICAgICAgICAgICAgIGFkZFRvICAoc3RyW10pIHRPYmouZW1pc3NpdmVfb2xkX3BscnMgKHN0cilwbHIuaWQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CgkJcmV0QXJyYXlbY29udGVudHNpZHhdID0gY29udGVudHM7Cgl9CgogICAgZm9yIChudW0gaSA9IDA7IGkgPCBsZW5ndGhPZiBkZWxBcnJheTsgaSsrKXsKICAgICAgICBhZGRUbyByZXRBcnJheSBkZWxBcnJheVtpXTsKICAgIH0KICAgIHJldEFycmF5WzBdID0gdG90YWxvYmpzOwogICAgcmV0QXJyYXlbMV0gPSBsZW5ndGhPZiBkZWxBcnJheTsKCXJldHVybiByZXRBcnJheTsKfQoKbnVtIHN5bmNvYmpzX3NfdGxhc3Ricm9hZGNhc3QgPSAwOwpvYmpbXSBzeW5jb2Jqc19zX29iamxpc3QgPSBvYmpbXTsKbnVtW10gc3luY29ianNfc19uZXdkZWxsaXN0ID0gbnVtW107Cm51bSBzeW5jb2Jqc19zX29iamlkID0gMDsKbnVtIHN5bmNvYmpzX3NfdG5vdyA9IDA7CgojIFdBUk5JTkc6IHBhc3MgaW4gYSBmcmVzaCBvYmplY3Qgb25seSAtIG5vdCBhIHJlZmVyZW5jZSEgb3RoZXJ3aXNlIHlvdSByaXNrIG1vZGlmeWluZyB0aGUgcmVmZXJlbmNlCiMgZm9yIGV4YW1wbGUgZG9uJ3QgcGFzcyBpbiBhIHRlbXBsYXRlIG9iamVjdCBmb3Igc3luY29ianNfc19jcmVhdGVPYmplY3QodGVtcGxhdGVCYWxsKS4Kb2JqIGFjdGlvbiBzeW5jb2Jqc19zX2NyZWF0ZU9iamVjdChvYmogZCkgewogICAgCiAgICAjIG9iamVjdCB0ZW1wbGF0ZSEKICAgIG9iaiB0b2JqID0gewogICAgICAgIHR5cGU6IDAsICMwID0gY3ViZSwgMSA9IHNwaGVyZSwgMiA9IGN5bGluZGVyLCBhbGwgZWxzZSA9IG1vZGVsSUQKICAgICAgICBhaWQ6IDM0Mzc5LAogICAgICAgIHNjYWxlOiB7eDoyMCx5OjgwLHo6MjB9LCAjIG1vZGVscyBvbmx5IG5lZWQgeDpzY2FsZSB3aGljaCBpcyBhbGwgMyBkaW1lbnNpb25zCiAgICAgICAgcG9zaXRpb246IHt4OjEseToxLHo6MX0sCiAgICAgICAgdmVsb2NpdHk6IHt4OjAseTowLHo6MH0sCiAgICAgICAgcm90YXRpb246IHt4OjAseTowLHo6MH0sCiAgICAgICAgY29sb3I6IDB4MDBBOEY5LAogICAgICAgIGVtaXNzaXZlOjB4MDAwMDAwLAogICAgICAgIGNvbGxpZGU6IHt0eXBlOjEscmVzb2x2ZToiIn0KICAgICAgICAjIHR5cGU6MSA9IENPTF9XT1JMRCAKICAgIH07CiAgICBpZiAoKHN0cikgZC50eXBlID09ICJ1bmRlZmluZWQiKSB7ZC50eXBlID0gdG9iai50eXBlO30KICAgIGQudHlwZV9vbGQgPSAoc3RyKWQudHlwZSArICJhIjsKICAgIGQudHlwZV9vbGRfcGxycyA9IHN0cltdOwogICAgaWYgKChzdHIpIGQuYWlkID09ICJ1bmRlZmluZWQiKSB7ZC5haWQgPSB0b2JqLmFpZDt9CiAgICBkLmFpZF9vbGRfcGxycyA9IHN0cltdOwogICAgZC5haWRfb2xkID0gKG51bSlkLmFpZCArIDE7CiAgICBpZiAoIW5vdEVtcHR5IChvYmopIGQuc2NhbGUpIHtkLnNjYWxlID0gdG9iai5zY2FsZTt9CiAgICBkLnNjYWxlX29sZF9wbHJzID0gc3RyW107CiAgICBkLnNjYWxlX29sZCA9IHt4OjAseTowLHo6KG51bSlkLnNjYWxlLnorMX07CiAgICBpZiAoIW5vdEVtcHR5IChvYmopIGQucG9zaXRpb24pIHtkLnBvc2l0aW9uID0gdG9iai5wb3NpdGlvbjt9CiAgICBkLnBvc19vbGRfcGxycyA9IHN0cltdOwogICAgZC5wb3Nfb2xkID0ge3g6MCx5OjAsejoobnVtKWQucG9zaXRpb24ueisxfTsKICAgIGlmICghbm90RW1wdHkgKG9iaikgZC52ZWxvY2l0eSkge2QudmVsb2NpdHkgPSB0b2JqLnZlbG9jaXR5O30KICAgIGQudmVsX29sZF9wbHJzID0gc3RyW107CiAgICBkLnZlbF9vbGQgPSB7eDowLHk6MCx6OihudW0pZC52ZWxvY2l0eS56KzF9OwogICAgaWYgKCFub3RFbXB0eSAob2JqKSBkLnJvdGF0aW9uKSB7ZC5yb3RhdGlvbiA9IHRvYmoucm90YXRpb247fQogICAgZC5yb3Rfb2xkX3BscnMgPSBzdHJbXTsKICAgIGQucm90X29sZCA9IHt4OjAseTowLHo6KG51bSlkLnJvdGF0aW9uLnorMX07CiAgICAjaWYgaGVhbHRoIGlzIHRoZXJlLCBhZGQgb2xkIGRhdGEgY29udGFpbmVyCiAgICBpZiAobm90RW1wdHkgKG9iailkLmhlYWx0aCl7CiAgICAgICAgZC5oZWFsdGhfb2xkID0ge2g6MCxmaDoobnVtKWQuaGVhbHRoLmZoLTF9OwogICAgfQogICAgaWYgKChzdHIpIGQuY29sb3IgPT0gInVuZGVmaW5lZCIpIHtkLmNvbG9yID0gdG9iai5jb2xvcjt9CiAgICBkLmNvbG9yX29sZF9wbHJzID0gc3RyW107CiAgICBkLmNvbG9yX29sZCA9IChudW0pZC5jb2xvcisxOwoKICAgIGlmICgoc3RyKSBkLmVtaXNzaXZlID09ICJ1bmRlZmluZWQiKSB7ZC5lbWlzc2l2ZSA9IHRvYmouZW1pc3NpdmU7fQogICAgZC5lbWlzc2l2ZV9vbGRfcGxycyA9IHN0cltdOwogICAgZC5lbWlzc2l2ZV9vbGQgPSAobnVtKWQuZW1pc3NpdmUrMTsKCiAgICBpZiAoIW5vdEVtcHR5IChvYmopZC5jb2xsaWRlKSB7CiAgICAgICAgZC5jb2xsaWRlID0ge3R5cGU6dG9iai5jb2xsaWRlLnR5cGUscmVzb2x2ZToiIn07CiAgICB9CgoJZC5vYmppZCA9IHRvTnVtIHRvU3RyIHN5bmNvYmpzX3Nfb2JqaWQ7CiAgICBzeW5jb2Jqc19zX29iamlkKys7CiAgICBhZGRUbyBzeW5jb2Jqc19zX29iamxpc3QgZDsKICAgIHJldHVybiBkOwp9Cgpib29sIGFjdGlvbiBzeW5jb2Jqc19zX2RlbGV0ZU9iamVjdChzdHIgaWQpIHsKICAgIGZvciAobnVtIGkgPSBsZW5ndGhPZiBzeW5jb2Jqc19zX29iamxpc3QgLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIGlmICgoc3RyKSBzeW5jb2Jqc19zX29iamxpc3RbaV0ub2JqaWQgPT0gaWQpIHsKICAgICAgICAgICAgaWYgKChzdHIpc3luY29ianNfc19vYmpsaXN0W2ldLmRlbCA9PSAidW5kZWZpbmVkIiB8fCAoYm9vbClzeW5jb2Jqc19zX29iamxpc3RbaV0uZGVsID09IGZhbHNlKXsKICAgICAgICAgICAgICAgICMgYWRkVG8gc3luY29ianNfc19uZXdkZWxsaXN0IHRvTnVtIHN5bmNvYmpzX3Nfb2JqbGlzdFtpXS5vYmppZDsKICAgICAgICAgICAgICAgICMgcmVtb3ZlIHN5bmNvYmpzX3Nfb2JqbGlzdFtpXTsKICAgICAgICAgICAgICAgIHN5bmNvYmpzX3Nfb2JqbGlzdFtpXS5kZWw9dHJ1ZTsKICAgICAgICAgICAgICAgIHN5bmNvYmpzX3Nfb2JqbGlzdFtpXS5kZWxwbHJpZHM9c3RyW107CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQoKYWN0aW9uIHN5bmNvYmpzX3NfZGVsZXRlQWxsT2JqcygpewogICAgZm9yIChudW0gaSA9IGxlbmd0aE9mIHN5bmNvYmpzX3Nfb2JqbGlzdCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgIyBhZGRUbyBzeW5jb2Jqc19zX25ld2RlbGxpc3QgdG9OdW0gc3luY29ianNfc19vYmpsaXN0W2ldLm9iamlkOwogICAgICAgICMgcmVtb3ZlIHN5bmNvYmpzX3Nfb2JqbGlzdFtpXTsKICAgICAgICBzeW5jb2Jqc19zX29iamxpc3RbaV0uZGVsPXRydWU7CiAgICAgICAgc3luY29ianNfc19vYmpsaXN0W2ldLmRlbHBscmlkcz1zdHJbXTsKICAgICAgICAKICAgIH0KfQoKb2JqIGFjdGlvbiBzeW5jb2Jqc19zX2ZpbmRPYmpieUlEKHN0ciBpZCl7CiAgICBmb3IgKG51bSBpID0gbGVuZ3RoT2Ygc3luY29ianNfc19vYmpsaXN0IC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICBpZiAoKHN0cikgc3luY29ianNfc19vYmpsaXN0W2ldLm9iamlkID09IGlkKSB7CiAgICAgICAgICAgIHJldHVybiBzeW5jb2Jqc19zX29iamxpc3RbaV07CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHt9Owp9CgpzdHJbXSBhY3Rpb24gc3luY29ianNfc19saXN0T2JqSURzKCl7CiAgICBzdHJbXSBsaXN0ID0gc3RyW107CiAgICBmb3IgKG51bSBpID0gMDsgaSA8IGxlbmd0aE9mIHN5bmNvYmpzX3Nfb2JqbGlzdDsgaSsrKXsKICAgICAgICBhZGRUbyBsaXN0IChzdHIpIHN5bmNvYmpzX3Nfb2JqbGlzdFtpXS5vYmppZDsKICAgIH0KICAgIHJldHVybiBsaXN0Owp9CgphY3Rpb24gc3luY29ianNfc19zdGFydCgpIHsKICAgIHN5bmNvYmpzX3Nfb2JqbGlzdCA9IG9ialtdOwogICAgc3luY29ianNfc19vYmppZD0wOwp9CgphY3Rpb24gc3luY29ianNfc191cGRhdGUobnVtIGRlbHRhKSB7CglzeW5jb2Jqc19zX3Rub3cgPSBnX3Rub3c7CgogICAgIyBCcm9hZGNhc3QgU3luY2VkIE9iamVjdHMgZGF0YQogICAgaWYgKChzeW5jb2Jqc19zX3Rub3cgLSBzeW5jb2Jqc19zX3RsYXN0YnJvYWRjYXN0KSA+IHN5bmNvYmpzX3NfU1lOQ19JTlRFUlZBTCkgewogICAgICAgIHN5bmNvYmpzX3NfdGxhc3Ricm9hZGNhc3QgPSBzeW5jb2Jqc19zX3Rub3c7CiAgICAgICAgIyBzdHIgZW5jb2RlZG9iamRhdGEgPSBvYmplbmNvZGluZygpOwogICAgICAgICMgc3RyIGVuY29kZWRvYmpkYXRhID0gYjkxX2VuY29kZShzeW5jb2Jqc19zX29ianNUb0J5dGVBcnJheShzeW5jb2Jqc19zX29iamxpc3QsZmFsc2UpKTsgIyBzZW5kIG5ldyBkYXRhIG9ubHkKICAgICAgICAjIGJvb2wgc3VjY2VzcyA9IEdBTUUuTkVUV09SSy5icm9hZGNhc3QoInN5bmMiLCB7ZGF0YTpvYmpkYXRhfSk7CiAgICAgICAgb2JqW10gcGxycyA9IEdBTUUuUExBWUVSUy5saXN0KCk7CiAgICAgICAgYm9vbCBzdWNjZXNzPXRydWU7CiAgICAgICAgZm9yIChudW0gaSA9IDA7IGkgPCBsZW5ndGhPZiBwbHJzOyBpKyspIHsKCiAgICAgICAgICAgIG9iaiBwbHIgPSBwbHJzW2ldOwogICAgICAgICAgICBzdHIgZGF0YXRvc2VuZCA9ICIiOwogICAgICAgICAgICBib29sIHJlc2V0ID0gZmFsc2U7CiAgICAgICAgICAgICMgZ3VhcmQgZm9yIGluaXRpYWxpemluZyBuZXRkYXRhCiAgICAgICAgICAgIGlmICgoc3RyKSBwbHIubmV0ZGF0YSA9PSAidW5kZWZpbmVkIiB8fCAoYm9vbCkgcGxyLm5ldHJlc2V0ID09IHRydWUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJlc2V0ID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKHN0cilwbHIubmV0ZGF0YSA9PSAiIiB8fCAoc3RyKSBwbHIubmV0ZGF0YSA9PSAidW5kZWZpbmVkIiB8fCAoYm9vbCkgcGxyLm5ldHJlc2V0ID09IHRydWUpewogICAgICAgICAgICAgICAgcGxyLm5ldGRhdGEgPSBiOTFfZW5jb2RlKHN5bmNvYmpzX3Nfb2Jqc1RvQnl0ZUFycmF5KHN5bmNvYmpzX3Nfb2JqbGlzdCxyZXNldCxwbHIscGxycykpOyAjIHJlc2VuZCBhbGwgZGF0YSByZWdhcmRsZXNzIG9mIGFnZQogICAgICAgICAgICAgICAgcGxyLm5ldGRhdGFsZW4gPSBNYXRoLmNlaWwoKGxlbmd0aE9mIChzdHIpcGxyLm5ldGRhdGEpIC8gc3luY29ianNfc19NQVhMRU5fTkVUREFUQSk7CiAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHsKICAgICAgICAgICAgICAgICAgICBHQU1FLmxvZyhzeW5jb2Jqc19oX2J5dGVBcnJheVRvT2JqcyhiOTFfZGVjb2RlKChzdHIpcGxyLm5ldGRhdGEpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAjIGNoZWNrIHNpemUgb2YgZW5jb2RlZCBkYXRhIGlzIHRvbyBsYXJnZSBhbmQgd2FybgogICAgICAgICAgICAgICAgaWYgKGxlbmd0aE9mIChzdHIpcGxyLm5ldGRhdGEgPiBzeW5jb2Jqc19zX01BWExFTl9ORVREQVRBKXsKICAgICAgICAgICAgICAgICAgICBudW0gbmV0bmVlZGVkID0gTWF0aC5jZWlsKChsZW5ndGhPZiAoc3RyKXBsci5uZXRkYXRhKSAvIHN5bmNvYmpzX3NfTUFYTEVOX05FVERBVEEpOwogICAgICAgICAgICAgICAgICAgIG51bSB0X2ZwcyA9IDEwMDAvKHN5bmNvYmpzX3NfU1lOQ19JTlRFUlZBTCAqIG5ldG5lZWRlZCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRfZnBzIDwgc3luY29ianNfc19ERVNJUkVEX0ZQUyl7CiAgICAgICAgICAgICAgICAgICAgICAgIEdBTUUubG9nKCJXQVJOOiBkYXRhIGxlbmd0aCBpcyAiLCBsZW5ndGhPZiAoc3RyKXBsci5uZXRkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgR0FNRS5sb2coInRha2VzICIsIHN5bmNvYmpzX3NfU1lOQ19JTlRFUlZBTCAqIG5ldG5lZWRlZCwgIm1zIHRvIHNlbmQgdXBkYXRlIG9yIEZQUyBpcyAgIiwgdF9mcHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAjIHBsci5uZXRkYXRhbGVuID0gTWF0aC5jZWlsKChsZW5ndGhPZiBlbmNvZGVkb2JqZGF0YSkgLyBzeW5jb2Jqc19zX01BWExFTl9ORVREQVRBKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICMgZmlsbCBuZXR3b3JrIGRhdGEgaWYgaXQgRE5FIHlldAogICAgICAgICAgICAjIGlmIChsZW5ndGhPZiAoc3RyKSBwbHIubmV0ZGF0YSA9PSAwKQogICAgICAgICAgICAjIHsKICAgICAgICAgICAgICAgICMgcGxyLm5ldGRhdGEgPSBlbmNvZGVkb2JqZGF0YTsKICAgICAgICAgICAgICAgICMgcGxyLm5ldGRhdGFsZW4gPSBNYXRoLmNlaWwoKGxlbmd0aE9mIGVuY29kZWRvYmpkYXRhKSAvIHN5bmNvYmpzX3NfTUFYTEVOX05FVERBVEEpOwogICAgICAgICAgICAjIH0KICAgICAgICAgICAgIyBzZW5kIG92ZXIgbmV0ZGF0YSBpbiB0aGUgbWF4IHNpemUgYWxsb3dlZAogICAgICAgICAgICBpZiAobGVuZ3RoT2YgKHN0cikgcGxyLm5ldGRhdGEgPiBzeW5jb2Jqc19zX01BWExFTl9ORVREQVRBKXsKICAgICAgICAgICAgICAgIGRhdGF0b3NlbmQgPSBzdHJ1dGlsc19zcGxpY2UoKHN0cilwbHIubmV0ZGF0YSwwLHN5bmNvYmpzX3NfTUFYTEVOX05FVERBVEEpOwogICAgICAgICAgICAgICAgcGxyLm5ldGRhdGEgPSBzdHJ1dGlsc19zcGxpY2UoKHN0cilwbHIubmV0ZGF0YSxzeW5jb2Jqc19zX01BWExFTl9ORVREQVRBLGxlbmd0aE9mIChzdHIpcGxyLm5ldGRhdGEpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkYXRhdG9zZW5kID0gKHN0cikgcGxyLm5ldGRhdGE7CiAgICAgICAgICAgICAgICBwbHIubmV0ZGF0YSA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAjIHBjbnQgaXMgcGVyY2VudGFnZSBvZiBsb2FkIGNvbXBsZXRlCiAgICAgICAgICAgIG51bSBwY250ID0gTWF0aC5mbG9vcigoIDEgLSAoKGxlbmd0aE9mIChzdHIpIHBsci5uZXRkYXRhKSAvICgobnVtKXBsci5uZXRkYXRhbGVuICogc3luY29ianNfc19NQVhMRU5fTkVUREFUQSkpKSoxMDApOwogICAgICAgICAgICAjIHN1Y2Nlc3MgPSBHQU1FLk5FVFdPUksuc2VuZCgic3luYyIsIHtkOmRhdGF0b3NlbmQsIGRlbGxpc3Q6c3luY29ianNfc19uZXdkZWxsaXN0LHBjbnQ6cGNudCxyc3Q6KGJvb2wpcGxyLm5ldHJlc2V0ID8gMTowfSwgKHN0cilwbHJzW2ldLmlkKTsgICAgCiAgICAgICAgICAgIHN1Y2Nlc3MgPSBHQU1FLk5FVFdPUksuc2VuZCgic3luYyIsIHtkOmRhdGF0b3NlbmQscGNudDpwY250LHJzdDooYm9vbClwbHIubmV0cmVzZXQgPyAxOjB9LCAoc3RyKXBscnNbaV0uaWQpOyAgICAKICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBHQU1FLmxvZygiRVJST1I6IHN5bmMgbm90IHNlbnQhISEiKTsKICAgICAgICAgICAgICAgIEdBTUUubG9nKHtkOmRhdGF0b3NlbmQscGNudDpwY250LHJzdDooYm9vbClwbHIubmV0cmVzZXQgPyAxOjB9KTsKICAgICAgICAgICAgICAgICMgR0FNRS5sb2coe2Q6ZGF0YXRvc2VuZCwgZGVsbGlzdDpzeW5jb2Jqc19zX25ld2RlbGxpc3QscGNudDpwY250LHJzdDooYm9vbClwbHIubmV0cmVzZXQgPyAxOjB9KTsKICAgICAgICAgICAgfSAKICAgICAgICB9CgogICAgICAgICMgZmluZCBhbGwgb2JqZWN0cyB0aGF0IGFyZSBmdWxseSBkZWxldGVkIChzZW50IGRlbGV0ZSB0byBhbGwgcGxheWVycykKICAgICAgICBmb3IgKG51bSBpID0gbGVuZ3RoT2Ygc3luY29ianNfc19vYmpsaXN0IC0gMTsgaSA+PSAwOyBpLS0pCiAgICAgICAgewogICAgICAgICAgICBvYmogdE9iaiA9IHN5bmNvYmpzX3Nfb2JqbGlzdFtpXTsKICAgICAgICAgICAgaWYgKChzdHIpdE9iai5kZWwgIT0gInVuZGVmaW5lZCIgJiYgKGJvb2wpdE9iai5kZWwgPT0gdHJ1ZSl7CiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoT2YgKHN0cltdKXRPYmouZGVscGxyaWRzID49IGxlbmd0aE9mIHBscnMpewogICAgICAgICAgICAgICAgICAgIHJlbW92ZSBzeW5jb2Jqc19zX29iamxpc3RbaV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgaWYgKHN1Y2Nlc3MpIHsKICAgICAgICAjICAgICBzeW5jb2Jqc19zX25ld2RlbGxpc3QgPSBudW1bXTsKICAgICAgICAjIH0KICAgIH0KfQoKIyBSdW5zIHdoZW4gdGhlIHJvdW5kIGVuZHMKYWN0aW9uIHN5bmNvYmpzX3Nfb25HYW1lRW5kKCkgewogICAgIyBkZWxldGUgYWxsIG9iamVjdHMgY2xpZW50IHNpZGUKICAgIEdBTUUuTkVUV09SSy5icm9hZGNhc3QoImNsZWFyIiwge30pOwp9CgphY3Rpb24gc3luY29ianNfc19vbk5ldHdvcmtNZXNzYWdlKHN0ciBpZCwgb2JqIGRhdGEsIHN0ciBwbGF5ZXJJRCkgewogICAgaWYgKGlkID09ICJyZWZyZXNob2JqcyIpewogICAgICAgIG9iaiBwbHIgPSBHQU1FLlBMQVlFUlMuZmluZEJ5SUQocGxheWVySUQpOwogICAgICAgIHBsci5uZXRyZXNldCA9IHRydWU7CiAgICB9Cn0KI2luY2x1ZGUgPGcua3Juaz4KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgTGlicmFyeTogXGxpYnNccGxydXRpbF9zX3NwYXduZWRQbGF5ZXJzXHBscnV0aWxfcy5rcm5rCiMgQXV0aG9yOiBibGFuZHJpY2UKIyAgIERlc2NyaXB0aW9uOiB3b3JrYXJvdW5kIHRvIGNoZWNrIGhvdyBtYW55IHBsYXllcnMgYXJlIHNwYXduZWQgaW4KIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpzdHJbXSBwbHJ1dGlsX3Nfc3Bhd25lZFBsYXllcnMgPSBzdHJbXTsKYm9vbCBwbHJ1dGlsX3Nfc29sb2dhbWUgPSB0cnVlOwpudW0gcGxydXRpbF9zX3RGaXJzdFNwYXduZWRQbGF5ZXIgPSAwOwpudW0gcGxydXRpbF9zX3RMYXN0U3Bhd25lZFBsYXllciA9IDA7CgoKYWN0aW9uIHBscnV0aWxfc19zdGFydCgpIHsKICAgIHBscnV0aWxfc19zcGF3bmVkUGxheWVycyA9IHN0cltdOwogICAgcGxydXRpbF9zX3RGaXJzdFNwYXduZWRQbGF5ZXIgPSAwOwogICAgcGxydXRpbF9zX3RMYXN0U3Bhd25lZFBsYXllciA9IDA7CiAgICBwbHJ1dGlsX3Nfc29sb2dhbWUgPSB0cnVlOwp9CgoKIyBQbGF5ZXIgZGllZAphY3Rpb24gcGxydXRpbF9zX29uUGxheWVyRGVhdGgoc3RyIGlkLCBzdHIga2lsbGVySUQpIHsKICAgIGZvciAobnVtIGkgPSBsZW5ndGhPZiBwbHJ1dGlsX3Nfc3Bhd25lZFBsYXllcnMtMTsgaSA+PTA7IGktLSkgewogICAgICAgIGlmIChpZCA9PSBwbHJ1dGlsX3Nfc3Bhd25lZFBsYXllcnNbaV0pIHsKICAgICAgICAgICAgcmVtb3ZlIHBscnV0aWxfc19zcGF3bmVkUGxheWVyc1tpXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfQp9CiMgV2hlbiBhIHBsYXllciBsZWF2ZXMgdGhlIHNlcnZlcgphY3Rpb24gcGxydXRpbF9zX29uUGxheWVyTGVhdmUoc3RyIHBsYXllcklEKSB7CiAgICBmb3IgKG51bSBpID0gbGVuZ3RoT2YgcGxydXRpbF9zX3NwYXduZWRQbGF5ZXJzLTE7IGkgPj0wOyBpLS0pIHsKICAgICAgICBpZiAocGxheWVySUQgPT0gcGxydXRpbF9zX3NwYXduZWRQbGF5ZXJzW2ldKSB7CiAgICAgICAgICAgIHJlbW92ZSBwbHJ1dGlsX3Nfc3Bhd25lZFBsYXllcnNbaV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH0KfQojIFNwYXduIE5vdGlmaWNhdGlvbiBtdXN0IGNvbWUgZnJvbSBDbGllbnQKYWN0aW9uIHBscnV0aWxfc19vbk5ldHdvcmtNZXNzYWdlKHN0ciBpZCwgb2JqIGRhdGEsIHN0ciBwbGF5ZXJJRCkgewogICAgaWYgKGlkID09ICJzcGF3biIpIHsKICAgICAgICBib29sIGhhc1NwYXduZWQgPSBmYWxzZTsKICAgICAgICBmb3IgKG51bSBpID0gMDsgaSA8IGxlbmd0aE9mIHBscnV0aWxfc19zcGF3bmVkUGxheWVyczsgaSsrKSB7CiAgICAgICAgICAgIGlmIChwbHJ1dGlsX3Nfc3Bhd25lZFBsYXllcnNbaV0gPT0gaWQpIHsKICAgICAgICAgICAgICAgIGhhc1NwYXduZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCFoYXNTcGF3bmVkKSB7YWRkVG8gcGxydXRpbF9zX3NwYXduZWRQbGF5ZXJzIHBsYXllcklEO30KICAgICAgICBpZiAobGVuZ3RoT2YgcGxydXRpbF9zX3NwYXduZWRQbGF5ZXJzID49IDIpIHtwbHJ1dGlsX3Nfc29sb2dhbWUgPSBmYWxzZTt9CiAgICAgICAgaWYgKHBscnV0aWxfc190Rmlyc3RTcGF3bmVkUGxheWVyID09IDApIHtwbHJ1dGlsX3NfdEZpcnN0U3Bhd25lZFBsYXllciA9IGdfdG5vdzt9CiAgICAgICAgcGxydXRpbF9zX3RMYXN0U3Bhd25lZFBsYXllciA9IGdfdG5vdzsKICAgIH0KfQoKbnVtIGNyZWF0ZWQgPSAwOwpvYmogdGVzdCA9IHt9OwpwdWJsaWMgYWN0aW9uIHVwZGF0ZShudW0gZGVsdGEpewogICAgZ191cGRhdGUoZGVsdGEpOwogICAgc3luY29ianNfc191cGRhdGUoZGVsdGEpOwoKICAgIGlmIChsZW5ndGhPZiBwbHJ1dGlsX3Nfc3Bhd25lZFBsYXllcnMgPiAwICYmIGNyZWF0ZWQgPT0gMCkgewogICAgICAgIHN5bmNvYmpzX3NfY3JlYXRlT2JqZWN0KHtwb3NpdGlvbjp7eDoyMix5OjIyLHo6MjJ9LGNvbG9yOjB4ZmYwMDAwfSk7CiAgICAgICAgc3luY29ianNfc19jcmVhdGVPYmplY3Qoe3JvdGF0aW9uOnt4OjAseTowLHo6MH0scG9zaXRpb246e3g6MjIseToyMix6OjIyfSxjb2xvcjoweDAwZmYwMH0pOwoKICAgICAgICBmb3IgKG51bSBpID0gMDsgaSA8IDcwOyBpKyspewogICAgICAgICAgICBzeW5jb2Jqc19zX2NyZWF0ZU9iamVjdCh7cm90YXRpb246e3g6MCx5OjAsejowfSxwb3NpdGlvbjp7eDoyMix5OjIyLHo6MjIraSo1fSxjb2xvcjoweDAwZmYwMCArIGl9KTsKICAgICAgICB9CiAgICAgICAgIyBzeW5jb2Jqc19zX2NyZWF0ZU9iamVjdCh7cG9zaXRpb246e3g6MCx5OjAsejowfSxjb2xvcjoweDAwZmYwMH0pOwogICAgICAgICMgc3luY29ianNfc19jcmVhdGVPYmplY3Qoe3Bvc2l0aW9uOnt4OjAseToyMCx6OjB9LGNvbG9yOjB4MDAwMGZmfSk7CiAgICAgICAgIyBzeW5jb2Jqc19zX2NyZWF0ZU9iamVjdCh7cG9zaXRpb246e3g6MCx5OjQwLHo6MH0sY29sb3I6MHhmZmZmMDB9KTsKICAgICAgICAjIHN5bmNvYmpzX3NfY3JlYXRlT2JqZWN0KHtwb3NpdGlvbjp7eDoyMCx5OjAsejowfSxjb2xvcjoweDAwZmZmZn0pOwogICAgICAgICMgc3luY29ianNfc19jcmVhdGVPYmplY3Qoe3Bvc2l0aW9uOnt4OjQwLHk6MCx6OjB9LGNvbG9yOjB4ZmZmZmZmfSk7CiAgICAgICAgIyBzeW5jb2Jqc19zX2NyZWF0ZU9iamVjdCh7cG9zaXRpb246e3g6MCx5OjAsejoyMH0sY29sb3I6MHgwMDAwMDB9KTsKICAgICAgICAjIHN5bmNvYmpzX3NfY3JlYXRlT2JqZWN0KHtwb3NpdGlvbjp7eDowLHk6MCx6OjQwfSxjb2xvcjoweGZmMDBmZn0pOwogICAgICAgIGNyZWF0ZWQgPSAxOwogICAgfQoKICAgICMgaWYgKG5vdEVtcHR5IHRlc3QpewogICAgIyAgICAgKG51bSkgdGVzdC5yb3RhdGlvbi54ICs9IE1hdGgudG9SYWQoMS4wKmRlbHRhKTsKICAgICMgfQoKfQoKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIGF1dG8tZGV0ZWN0ZWQgcHVibGljIGFjdGlvbnMgZnJvbSBsaWJyYXJpZXMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CnB1YmxpYyBhY3Rpb24gb25OZXR3b3JrTWVzc2FnZSAoc3RyIGlkLCBvYmogZGF0YSwgc3RyIHBsYXllcklEKXsKICAgIHN5bmNvYmpzX3Nfb25OZXR3b3JrTWVzc2FnZShpZCwgIGRhdGEsICBwbGF5ZXJJRCk7CiAgICBwbHJ1dGlsX3Nfb25OZXR3b3JrTWVzc2FnZShpZCwgIGRhdGEsICBwbGF5ZXJJRCk7Cn0KCnB1YmxpYyBhY3Rpb24gb25QbGF5ZXJMZWF2ZSAoc3RyIHBsYXllcklEKXsKICAgIHBscnV0aWxfc19vblBsYXllckxlYXZlKHBsYXllcklEKTsKfQoKcHVibGljIGFjdGlvbiBvblBsYXllckRlYXRoIChzdHIgaWQsIHN0ciBraWxsZXJJRCl7CiAgICBwbHJ1dGlsX3Nfb25QbGF5ZXJEZWF0aChpZCwgIGtpbGxlcklEKTsKfQoKcHVibGljIGFjdGlvbiBzdGFydCAoKXsKICAgIHN5bmNvYmpzX3Nfc3RhcnQoKTsKICAgIHBscnV0aWxfc19zdGFydCgpOwp9CgpwdWJsaWMgYWN0aW9uIG9uR2FtZUVuZCAoKXsKICAgIHN5bmNvYmpzX3Nfb25HYW1lRW5kKCk7Cn0KCg=="},"spawns":[[0,0,0,0,0,0]]}