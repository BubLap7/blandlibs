#include <dtypes.krnk>
#include <b91.krnk>
#include <syncobjs_h.krnk>

# ===================================================================
# Library: \libs\syncobjs\syncobjs_c.krnk
# Author: blandrice
#   Description: not ready!
# ===================================================================

# # Binary decoding of an array of bytes to Objects
# obj[] action syncobjs_h_byteArrayToObjs(num[] byteArray) {
# 	obj[] objlist = obj[];
# 	num i = 0;
# 	while (i < lengthOf byteArray-1){
# 		obj tobj = {};
# 		# contents byte
# 		num contents = byteArray[i];
# 		i++;
# 		# object id 2 bytes
# 		tobj.objid = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
# 		i+=2;
# 		# 4 bytes health / fullhealth
# 		if ((contents & 0x40) > 0) {
# 			tobj.health = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
# 			tobj.fhealth = dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3]);
# 			i+= 4;
# 		}
# 		# 6 bytes position
# 		if ((contents & 0x20) > 0){
# 			tobj.position = {
# 				x : dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i],byteArray[i+1])),
# 				y : dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3])),
# 				z : dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+4],byteArray[i+5]))
# 			};
# 			i+= 6;
# 		}
# 		# 6 bytes rotation
# 		if ((contents & 0x10) > 0) {
# 			tobj.rotation ={
# 				x: dtypes_float16ToNum(dtypes_merge2Bytes(byteArray[i],byteArray[i+1])),
# 				y: dtypes_float16ToNum(dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3])),
# 				z: dtypes_float16ToNum(dtypes_merge2Bytes(byteArray[i+4],byteArray[i+5]))
# 			};
# 			i+= 6;
# 		}
# 		# 6 bytes scale
# 		if ((contents & 0x08) > 0) {
# 			tobj.scale = {
# 				x: dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i],byteArray[i+1])),
# 				y: dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3])),
# 				z: dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+4],byteArray[i+5]))
# 			};
# 			i+= 6;
# 		}
# 		# 7 bytes details (2 type, 2 texture, 3 color)
# 		if ((contents & 0x04) > 0) {
# 			tobj.type = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
#             i+=2;
# 		}
#         if ((contents & 0x02) > 0) {
# 			tobj.aid = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
#             i+=2;
# 		}
#         if ((contents & 0x01) > 0) {
# 			tobj.color = byteArray[i] | (byteArray[i+1] << 8) | (byteArray[i+2] << 16);
#             i+=3;
# 		}
#         if ((contents & 0x80) > 0) {
# 			tobj.emissive = byteArray[i] | (byteArray[i+1] << 8) | (byteArray[i+2] << 16);
#             i+=3;
# 		}
        
# 		addTo objlist tobj;
# 	}
# 	return objlist;
# }

obj[] objlist = obj[];
str netdata = "";
str[] delList = str[];

# interpolation
num newTime = 0;
num oldTime = 0;
num dataBuffer = 0;
num interpM = 0;

# update with new object data
bool action updateobjproperties(obj currentObj, obj newObjData) {
    currentObj.oldpos.x = (num) currentObj.newpos.x;
    currentObj.oldpos.y = (num) currentObj.newpos.y;
    currentObj.oldpos.z = (num) currentObj.newpos.z;
    currentObj.oldrot.x = (num) currentObj.newrot.x;
    currentObj.oldrot.y = (num) currentObj.newrot.y;
    currentObj.oldrot.z = (num) currentObj.newrot.z;

    if (notEmpty (obj) newObjData.position){
        currentObj.newpos.x = (num) newObjData.position.x;
        currentObj.newpos.y = (num) newObjData.position.y;
        currentObj.newpos.z = (num) newObjData.position.z;
    }
    if (notEmpty (obj) newObjData.scale){
        currentObj.scale.x = (num) newObjData.scale.x;
        currentObj.scale.y = (num) newObjData.scale.y;
        currentObj.scale.z = (num) newObjData.scale.z;
    }
    if (!!(num)newObjData.health) {
        currentObj.health = (num)newObjData.health;
    }
    if (!!(num)newObjData.fhealth) {
        currentObj.fhealth = (num)newObjData.fhealth;
    }
    if (notEmpty (obj)newObjData.rotation) {
        currentObj.newrot.x = (num) newObjData.rotation.x;
        currentObj.newrot.y = (num) newObjData.rotation.y;
        currentObj.newrot.z = (num) newObjData.rotation.z;
    }
    if ((str)newObjData.emissive !="undefined"){
        str colr = "#" + dtypes_num2hexstring((num) newObjData.emissive);
        currentObj.emissive = colr;
    }
    return true;
}

# First creation of object
obj action createObj(obj newObjData) {
    if ((num) newObjData.type == 0) {
        # str aid = (str) newObjData.aid;
        # str aid = "34379"; # temp fix for now
        str colr = "#" + dtypes_num2hexstring((num) newObjData.color);
        # obj cube = GAME.SCENE.addCube(toStr (num)newObjData.aid, colr, (num)newObjData.position.x,(num)newObjData.position.y,(num)newObjData.position.z, 0,0,0);
        obj cube = GAME.SCENE.addCube(toStr (num)newObjData.aid, colr, (num)newObjData.position.x,(num)newObjData.position.y,(num)newObjData.position.z, (num)newObjData.scale.x,(num)newObjData.scale.y,(num)newObjData.scale.z);
        cube.objid = (num) newObjData.objid;
        cube.oldpos = {x:(num)newObjData.position.x,y:(num)newObjData.position.y,z:(num)newObjData.position.z};
        cube.newpos = {x:(num)newObjData.position.x,y:(num)newObjData.position.y,z:(num)newObjData.position.z};

        cube.oldrot = {x:(num)newObjData.rotation.x,y:(num)newObjData.rotation.y,z:(num)newObjData.rotation.z};
        cube.newrot = {x:(num)newObjData.rotation.x,y:(num)newObjData.rotation.y,z:(num)newObjData.rotation.z};

        cube.health = (num)newObjData.health;
        cube.fhealth = (num)newObjData.fhealth;
        cube.hit = (num)newObjData.hit;
      
        updateobjproperties(cube, newObjData);
        return cube;
    }
    return {};
}

action lerpObj(num delta) {
    interpM = Math.min(1.5, (GAME.TIME.now() - newTime) / dataBuffer);
    for (num i = 0; i < lengthOf objlist; i++){
        obj curObj = objlist[i];
        if (!notEmpty (obj) curObj.ogpos){
            curObj.ogpos = {};
        }
        curObj.ogpos = 
        {
            x:curObj.position.x,
            y:curObj.position.y,
            z:curObj.position.z
        };
        (num) curObj.position.x += (Math.lerp((num)curObj.oldpos.x, (num)curObj.newpos.x, interpM)-(num)curObj.position.x)*delta/1000*60/4;
        (num) curObj.position.y += (Math.lerp((num)curObj.oldpos.y, (num)curObj.newpos.y, interpM)-(num)curObj.position.y)*delta/1000*60/4;
        (num) curObj.position.z += (Math.lerp((num)curObj.oldpos.z, (num)curObj.newpos.z, interpM)-(num)curObj.position.z)*delta/1000*60/4;
        if (!notEmpty (obj) curObj.ogrot){
            curObj.ogrot = {};
        }
        curObj.ogrot = 
        {
            x:curObj.rotation.x,
            y:curObj.rotation.y,
            z:curObj.rotation.z
        };
        (num) curObj.rotation.x += (Math.lerp((num)curObj.oldrot.x, (num)curObj.newrot.x, interpM)-(num)curObj.rotation.x)*delta/1000*60/4;
        (num) curObj.rotation.y += (Math.lerp((num)curObj.oldrot.y, (num)curObj.newrot.y, interpM)-(num)curObj.rotation.y)*delta/1000*60/4;
        (num) curObj.rotation.z += (Math.lerp((num)curObj.oldrot.z, (num)curObj.newrot.z, interpM)-(num)curObj.rotation.z)*delta/1000*60/4;

        if (!notEmpty (obj) curObj.velocity){
            curObj.velocity = {};
        }
        curObj.velocity.x = ((num) curObj.position.x - (num) curObj.ogpos.x) / delta;
        curObj.velocity.y = ((num) curObj.position.y - (num) curObj.ogpos.y) / delta;
        curObj.velocity.z = ((num) curObj.position.z - (num) curObj.ogpos.z) / delta;
    }
    
    
     
}

obj action findObjbyID(num id) {
    for (num i = 0; i < lengthOf objlist; i++) {
        if ((num) objlist[i].objid == id) {
            return objlist[i];
        }
    }
    return {};
}

action deleteobj(num id) {
    for (num i = 0; i < lengthOf objlist; i++) {
        if ((num) objlist[i].objid == id) {
            obj cube = objlist[i];
            addTo delList (str) cube.objid;
            remove objlist[i];
            cube.delete();
        }
    }
}

action clearAllObjs(){
    for (num i = lengthOf objlist - 1; i >= 0; i--) {
        deleteobj((num)objlist[i].objid);
    }
    objlist = obj[];
    delList = str[];
}

bool action objIDWasDeleted(str id) {
    for (num i = 0; i < lengthOf delList; i++) {
        if (id == delList[i]) {
            return true;
        }
        
    }
    return false;
}

bool action updateobjs(obj[] netobjs) {
    for (num i = 0; i < lengthOf netobjs; i++){
        obj newObjData = netobjs[i];
        # add new Object
        if ((lengthOf objlist == 0) || ((num)newObjData.objid > (num) objlist[lengthOf objlist - 1].objid)) {
            if (!objIDWasDeleted((str)newObjData.objid)) {
                obj newObj = createObj(newObjData);
                addTo objlist newObj;
            } else {
                GAME.log("object already deleted! " + (str)newObjData.objid);
            }
        } 
        # Update current object properties
        else {
            obj curObj = findObjbyID((num)newObjData.objid);
            bool success = updateobjproperties(curObj, newObjData);
            if (!success) {
                GAME.log("ERROR: properties not updated for objid: ", toStr newObjData.objid);
                GAME.log(newObjData);
                GAME.log(objlist);
            }
        }
    }
    return true;
}

# reset object lists, time vars, attempted to preload sounds into game engine to avoid the first sound's lag.
public action start() {
    objlist = obj[];
    delList = str[];
    
    oldTime = GAME.TIME.now();
    newTime = GAME.TIME.now();
}

public action onNetworkMessage(str id, obj data) {
    if (id == "sync") {
        
        # clear all object / network data if reset given
        if ((str)data.rst != "undefined" && (num)data.rst == 1){
            clearAllObjs();
            netdata = "";
        }
        netdata += (str)data.d;

        if ((str)data.pcnt != "undefined" && (num)data.pcnt == 100)
        {
            # data sent, perform decode and update objects
            obj decodeddata = syncobjs_h_byteArrayToObjs(b91_decode(netdata));
            obj[] netobjs = (obj[]) decodeddata.objlist;
            oldTime = newTime;
            newTime = GAME.TIME.now();
            dataBuffer = newTime - oldTime;
            
            updateobjs(netobjs);
            num[] newdellist = (num[]) decodeddata.delList;
            # num[] newdellist = (num[]) data.dellist;
            for (num i = 0; i < lengthOf newdellist; i++) {
                deleteobj(newdellist[i]);
            }
            # clear netdata string buffer
            netdata = "";
        }

        
    } else if (id == "clear") {
        clearAllObjs();       
    }
}

public action update(num delta){
    # object position lerping
    lerpObj(delta);
}