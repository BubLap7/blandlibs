# ===================================================================
# header: \libs\syncobjs\syncobjs_h.krnk
# Author: blandrice
#   Description: not ready!
# ===================================================================

# contents1
num eHEALTH = 0x01;
num ePOSITION = 0x02;
num eROTATION = 0x04;
num eSCALE = 0x08;
num eTYPE = 0x10;
num eTEXTURE = 0x20;
num eCOLOR = 0x40;
num eEMISSIVE = 0x80;
# contents2
num eCOLLISION = 0x01;

# Binary decoding of an array of bytes to Objects
obj action byteArrayToObjs(num[] byteArray) {
	obj[] objlist = obj[];
	num[] delList = num[];
	num i = 0; # pc in array
	num totalobjs = 0;
	num totaldelobjs = 0;
	if (lengthOf byteArray >=2)
	{
        totalobjs = byteArray[0];
        i++;
		totaldelobjs = byteArray[1];
		i++;
    } else
	{
        return {objlist:objlist,delList:delList};
    }
	
	for (num j = 0; j < totalobjs; j++){
		obj tobj = {};
		# contents byte
		num contents1 = byteArray[i];
		num contents2 = byteArray[i+1];
		i+=2;
		# object id 2 bytes
		tobj.objid = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
		i+=2;
		# 4 bytes health / fullhealth
		if ((contents1 & eHEALTH) > 0) {
			tobj.health = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
			tobj.fhealth = dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3]);
			i+= 4;
		}
		# 6 bytes position
		if ((contents1 & ePOSITION) > 0){
			tobj.position = {
				x : dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i],byteArray[i+1])),
				y : dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3])),
				z : dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+4],byteArray[i+5]))
			};
			i+= 6;
		}
		# 6 bytes rotation
		if ((contents1 & eROTATION) > 0) {
			tobj.rotation ={
				x: dtypes_float16ToNum(dtypes_merge2Bytes(byteArray[i],byteArray[i+1])),
				y: dtypes_float16ToNum(dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3])),
				z: dtypes_float16ToNum(dtypes_merge2Bytes(byteArray[i+4],byteArray[i+5]))
			};
			i+= 6;
		}
		# 6 bytes scale
		if ((contents1 & eSCALE) > 0) {
			tobj.scale = {
				x: dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i],byteArray[i+1])),
				y: dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+2],byteArray[i+3])),
				z: dtypes_Int16ToNum(dtypes_merge2Bytes(byteArray[i+4],byteArray[i+5]))
			};
			i+= 6;
		}
		# 7 bytes details (2 type, 2 texture, 3 color)
		if ((contents1 & eTYPE) > 0) {
			# tobj.type = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
			# i+=2;
			num len = byteArray[i];
			i++;
			num[] byteA = num[];
			for (num k = 0; k < len; k++)
			{
				addTo byteA byteArray[i];
				i++;
			}
			# num[] byteA = num[]; addTo byteA byteArray[i];
			tobj.type = dtypes_ByteArrayToStr(byteA);
            # i+=1;
			# GAME.log("type:",tobj.type);
		}
        if ((contents1 & eTEXTURE) > 0) {
			tobj.aid = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
            i+=2;
		}
        if ((contents1 & eCOLOR) > 0) {
			tobj.color = byteArray[i] | (byteArray[i+1] << 8) | (byteArray[i+2] << 16);
            i+=3;
		}
        if ((contents1 & eEMISSIVE) > 0) {
			tobj.emissive = byteArray[i] | (byteArray[i+1] << 8) | (byteArray[i+2] << 16);
            i+=3;
		}
		if ((contents2 & eCOLLISION) > 0)
		{
			tobj.collide = {
				type:byteArray[i],
				geometry:byteArray[i+1],
				resolve:byteArray[i+2]
			};
			i+=3;
		}
		addTo objlist tobj;
	}
	for (num j = 0; j < totaldelobjs; j++){
		num objid = dtypes_merge2Bytes(byteArray[i],byteArray[i+1]);
		addTo delList objid;
		i+=2;
	}


	return {objlist:objlist,delList:delList};
}