#include <g.krnk>
#include <dtypes.krnk>
#include <b91.krnk>
#include <strutils.krnk>
#include <listutil.krnk>
#include <syncobjs_h.krnk>

# ===================================================================
# Library: \libs\syncobjs\syncobjs_s.krnk
# Author: blandrice
#   Description: not ready!
# ===================================================================

num SYNC_INTERVAL = 50;
num DESIRED_FPS = 5;
num MAXLEN_NETDATA = 1500;

# object contents
num[] action objsToByteArray(obj[] objlist,bool reset, obj plr, obj[] plrs) {
	num[] retArray = num[];
    num[] delArray = num[];
    num totalobjs = 0;
    num totaldelobjs = 0;

    # 1 byte length of objects
    addTo retArray 0;

    # 1 byte length of del list
    addTo retArray 0;

	for (num i = 0; i < lengthOf objlist; i++) {
		obj tObj = objlist[i];
        if ((str)tObj.del != "undefined" && (bool)tObj.del == true){
            if (!listutil_instrlist((str)plr.id,(str[])tObj.delplrids)){
                addTo (str[])tObj.delplrids (str)plr.id;
                # addTo delArray toNum (str) tObj.objid;
                num[] tObjID_arr = num[];
                tObjID_arr = dtypes_int16toByteArray(toNum (str) tObj.objid);
                # addTo delArray toNum (str) tObj.objid;
                addTo delArray tObjID_arr[0]; addTo delArray tObjID_arr[1];
                totaldelobjs++;
                continue;
            }
        } else{
            totalobjs++;
        }

		num[] tArray = num[];

		# 1 byte (8bits) object contents
		num contents = 0x00;
		num contentsidx = lengthOf retArray;
		addTo retArray contents;
		# if ((num) tObj.hit>0) {contents |=  0x80;}
		
		# 2 bytes objid
		tArray = dtypes_int16toByteArray(dtypes_numToUint16((num)tObj.objid)); addTo retArray tArray[0]; addTo retArray tArray[1];

		# 4 bytes health/fhealth
		if (notEmpty (obj) tObj.health) {
                bool healthchanged = ((num) tObj.health.h != (num) tObj.health_old.h) || ((num) tObj.health.fh != (num) tObj.health_old.fh);
                if (healthchanged){
                    tObj.health_old = str[];
                    tObj.health_old = {x:tObj.health.h,y:tObj.health.fh};
                }
                if (healthchanged || ((!listutil_instrlist((str)plr.id,(str[])tObj.health_old_plrs))) || reset) {
                    contents |=  syncobjs_h_eHEALTH;
                    tArray = dtypes_int16toByteArray(dtypes_numToUint16((num)tObj.health.h)); addTo retArray tArray[0]; addTo retArray tArray[1];
                    tArray = dtypes_int16toByteArray(dtypes_numToUint16((num)tObj.health.fh)); addTo retArray tArray[0]; addTo retArray tArray[1];
                    addTo  (str[]) tObj.health_old_plrs (str)plr.id;
                }
            }
		# 6 bytes position
		# if (notEmpty (obj) tObj.position) {}
        if (notEmpty (obj) tObj.position) {
            bool poschanged = ((num) tObj.position.x != (num) tObj.pos_old.x) || ((num) tObj.position.y != (num) tObj.pos_old.y)  || ((num) tObj.position.z != (num) tObj.pos_old.z);
            if (poschanged){
                tObj.pos_old_plrs = str[];
                tObj.pos_old = {x:tObj.position.x,y:tObj.position.y,z:tObj.position.z};
            }
            if (poschanged || ((!listutil_instrlist((str)plr.id,(str[])tObj.pos_old_plrs))) || reset){
                contents |=  syncobjs_h_ePOSITION;
                tArray = dtypes_int16toByteArray(dtypes_numToInt16((num)tObj.position.x)); addTo retArray tArray[0]; addTo retArray tArray[1];
                tArray = dtypes_int16toByteArray(dtypes_numToInt16((num)tObj.position.y)); addTo retArray tArray[0]; addTo retArray tArray[1];
                tArray = dtypes_int16toByteArray(dtypes_numToInt16((num)tObj.position.z)); addTo retArray tArray[0]; addTo retArray tArray[1];
                addTo  (str[]) tObj.pos_old_plrs (str)plr.id;
            }
		}
		# 6 bytes rotation
		if (notEmpty (obj) tObj.rotation) {
            bool rotchanged = ((num) tObj.rotation.x != (num) tObj.rot_old.x) || ((num) tObj.rotation.y != (num) tObj.rot_old.y)  || ((num) tObj.rotation.z != (num) tObj.rot_old.z);
            if (rotchanged){
                tObj.rot_old_plrs = str[];
                tObj.rot_old = {x:tObj.rotation.x,y:tObj.rotation.y,z:tObj.rotation.z};
            }
            if (rotchanged || ((!listutil_instrlist((str)plr.id,(str[])tObj.rot_old_plrs))) || reset){
                contents |=  syncobjs_h_eROTATION;
                tArray = dtypes_int16toByteArray(dtypes_numToFloat16((num)tObj.rotation.x)); addTo retArray tArray[0]; addTo retArray tArray[1];
                # GAME.log("x: ",dtypes_numToFloat16((num)tObj.rotation.x), printBinary(dtypes_numToFloat16((num)tObj.rotation.x)));
                tArray = dtypes_int16toByteArray(dtypes_numToFloat16((num)tObj.rotation.y)); addTo retArray tArray[0]; addTo retArray tArray[1];
                tArray = dtypes_int16toByteArray(dtypes_numToFloat16((num)tObj.rotation.z)); addTo retArray tArray[0]; addTo retArray tArray[1];
                addTo  (str[]) tObj.rot_old_plrs (str)plr.id;
            }
		}
		# 6 bytes scale
		if (notEmpty (obj) tObj.scale) {
            bool scalechanged = ((num) tObj.scale.x != (num) tObj.scale_old.x) || ((num) tObj.scale.y != (num) tObj.scale_old.y)  || ((num) tObj.scale.z != (num) tObj.scale_old.z);
            if (scalechanged){
                tObj.scale_old_plrs = str[];
                tObj.scale_old = {x:tObj.scale.x,y:tObj.scale.y,z:tObj.scale.z};
            }
            if (scalechanged || ((!listutil_instrlist((str)plr.id,(str[])tObj.scale_old_plrs))) || reset){
                contents |=  syncobjs_h_eSCALE;
                tArray = dtypes_int16toByteArray(dtypes_numToInt16((num)tObj.scale.x)); addTo retArray tArray[0]; addTo retArray tArray[1];
                tArray = dtypes_int16toByteArray(dtypes_numToInt16((num)tObj.scale.y)); addTo retArray tArray[0]; addTo retArray tArray[1];
                tArray = dtypes_int16toByteArray(dtypes_numToInt16((num)tObj.scale.z)); addTo retArray tArray[0]; addTo retArray tArray[1];
                addTo  (str[]) tObj.scale_old_plrs (str)plr.id;
            }
		}
        # 7 bytes details (2 type, 2 texture, 3 color)
        # type (cube, sphere, sprite, modelID)
        if ((str)tObj.type != "undefined")
        {   
            bool typechanged = ((num) tObj.type != (num) tObj.type_old);
            if (typechanged){
                tObj.type_old_plrs = str[];
                tObj.type_old = (num)tObj.type;
            }
            if (typechanged || ((!listutil_instrlist((str)plr.id,(str[])tObj.type_old_plrs))) || reset){
                contents |=  syncobjs_h_eTYPE;
                # tArray = dtypes_int16toByteArray((num)tObj.type); addTo retArray tArray[0]; addTo retArray tArray[1];    
                # num len = lengthOf (str)tObj.type;
                # addTo retArray len;
                tArray = dtypes_strtoByteArray((str)tObj.type);
                num len = lengthOf tArray;
                addTo retArray len;
                for (num j = 0; j < len; j++)
                {
                    addTo retArray tArray[j];
                }
                # tArray = dtypes_strtoByteArray((str)tObj.type); addTo retArray tArray[0];
                addTo  (str[]) tObj.type_old_plrs (str)plr.id;
            }
        }
        # aid (texture) CANNOT BE UPDATED YET IN KS
        if ((str)tObj.aid!="undefined"){
            bool aid_changed = ((num) tObj.aid != (num) tObj.aid_old);
            if (aid_changed){
                tObj.aid_old_plrs = str[];
                tObj.aid_old = (num)tObj.aid;
            }
            if (aid_changed || ((!listutil_instrlist((str)plr.id,(str[])tObj.aid_old_plrs))) || reset){
                contents |=  syncobjs_h_eTEXTURE;
                tArray = dtypes_int16toByteArray((num)tObj.aid); addTo retArray tArray[0]; addTo retArray tArray[1];    
                addTo  (str[]) tObj.aid_old_plrs (str)plr.id;
                }
        }
        # color
		if ((str) tObj.color !="undefined"){
            bool color_changed = ((num) tObj.color != (num) tObj.color_old);
            if (color_changed){
                tObj.color_old_plrs = str[];
                tObj.color_old = (num)tObj.color;
            }
            if (color_changed || ((!listutil_instrlist((str)plr.id,(str[])tObj.color_old_plrs))) || reset){
                contents |=  syncobjs_h_eCOLOR;
                tArray = dtypes_ColorToByteArray((num)tObj.color); addTo retArray tArray[0]; addTo retArray tArray[1]; addTo retArray tArray[2];
                addTo  (str[]) tObj.color_old_plrs (str)plr.id;
            }
        }
        # emissive
		if ((str) tObj.emissive !="undefined"){
            bool emissive_changed = ((num) tObj.emissive != (num) tObj.emissive_old);
            if (emissive_changed){
                str colr = "#" + dtypes_num2hexstring((num) tObj.emissive);
                tObj.emissive_old_plrs = str[];
                tObj.emissive_old = (num)tObj.emissive;
            }
            if (emissive_changed || ((!listutil_instrlist((str)plr.id,(str[])tObj.emissive_old_plrs))) || reset){
                contents |=  syncobjs_h_eEMISSIVE;
                tArray = dtypes_ColorToByteArray((num)tObj.emissive); addTo retArray tArray[0]; addTo retArray tArray[1]; addTo retArray tArray[2];
                addTo  (str[]) tObj.emissive_old_plrs (str)plr.id;
            }
        }
		retArray[contentsidx] = contents;
	}

    for (num i = 0; i < lengthOf delArray; i++){
        addTo retArray delArray[i];
    }
    retArray[0] = totalobjs;
    retArray[1] = totaldelobjs;
	return retArray;
}

num tlastbroadcast = 0;
obj[] objlist = obj[];
num[] newdellist = num[];
num objid = 0;
bool objidoverflow = false;
num tnow = 0;
num BYTEOVERFLOW_LEN = 65535;
# num BYTEOVERFLOW_LEN = 256;

# WARNING: pass in a fresh object only - not a reference! otherwise you risk modifying the reference
# for example don't pass in a template object for createObject(templateBall).

obj action findObjbyID(str id){
    for (num i = lengthOf objlist - 1; i >= 0; i--) {
        if ((str) objlist[i].objid == id) {
            return objlist[i];
        }
    }
    return {};
}

obj action createObject(obj d) {
    if (lengthOf objlist >= BYTEOVERFLOW_LEN)
    {
        GAME.log("ERROR: EXCEEDED MAXIMUM OBJECTS IN OBJLIST ",BYTEOVERFLOW_LEN);
        return {};
    } else if (objidoverflow)
    {
        obj tobj = findObjbyID(toStr objid);
        while(notEmpty tobj)
        {
            objid++;
            if (objid>=BYTEOVERFLOW_LEN)
            {
                objid=0;
            }
        }
        
    }
    # object template!
    obj tobj = {
        type: "0", #0 = cube, 1 = sphere, 2 = cylinder, all else = modelID
        aid: 34379,
        scale: {x:20,y:80,z:20}, # models only need x:scale which is all 3 dimensions
        position: {x:1,y:1,z:1},
        velocity: {x:0,y:0,z:0},
        rotation: {x:0,y:0,z:0},
        color: 0x00A8F9,
        emissive:0x000000,
        collide: {type:1,resolve:""}
        # type:1 = COL_WORLD 
    };
    if ((str) d.type == "undefined") {d.type = tobj.type;}
    d.type_old = (str)d.type + "a";
    d.type_old_plrs = str[];
    if ((str) d.aid == "undefined") {d.aid = tobj.aid;}
    d.aid_old_plrs = str[];
    d.aid_old = (num)d.aid + 1;
    if (!notEmpty (obj) d.scale) {d.scale = tobj.scale;}
    d.scale_old_plrs = str[];
    d.scale_old = {x:0,y:0,z:(num)d.scale.z+1};
    if (!notEmpty (obj) d.position) {d.position = tobj.position;}
    d.pos_old_plrs = str[];
    d.pos_old = {x:0,y:0,z:(num)d.position.z+1};
    if (!notEmpty (obj) d.velocity) {d.velocity = tobj.velocity;}
    d.vel_old_plrs = str[];
    d.vel_old = {x:0,y:0,z:(num)d.velocity.z+1};
    if (!notEmpty (obj) d.rotation) {d.rotation = tobj.rotation;}
    d.rot_old_plrs = str[];
    d.rot_old = {x:0,y:0,z:(num)d.rotation.z+1};
    #if health is there, add old data container
    if (notEmpty (obj)d.health){
        d.health_old = {h:0,fh:(num)d.health.fh-1};
    }
    if ((str) d.color == "undefined") {d.color = tobj.color;}
    d.color_old_plrs = str[];
    d.color_old = (num)d.color+1;

    if ((str) d.emissive == "undefined") {d.emissive = tobj.emissive;}
    d.emissive_old_plrs = str[];
    d.emissive_old = (num)d.emissive+1;

    if (!notEmpty (obj)d.collide) {
        d.collide = {type:tobj.collide.type,resolve:""};
    }

    d.objid = toNum toStr objid;    
    if (objid>=BYTEOVERFLOW_LEN)
    {
        objid=0;
        objidoverflow=true;
    }
    else
    {
        objid++;
    }
    addTo objlist d;
    return d;
}

bool action deleteObject(str id) {
    for (num i = lengthOf objlist - 1; i >= 0; i--) {
        if ((str) objlist[i].objid == id) {
            if ((str)objlist[i].del == "undefined" || (bool)objlist[i].del == false){
                # addTo newdellist toNum objlist[i].objid;
                # remove objlist[i];
                objlist[i].del=true;
                objlist[i].delplrids=str[];
                return true;
            }
        }
    }
    return false;
}

action deleteAllObjs(){
    for (num i = lengthOf objlist - 1; i >= 0; i--) {
        # addTo newdellist toNum objlist[i].objid;
        # remove objlist[i];
        objlist[i].del=true;
        objlist[i].delplrids=str[];
        
    }
}

str[] action listObjIDs(){
    str[] list = str[];
    for (num i = 0; i < lengthOf objlist; i++){
        addTo list (str) objlist[i].objid;
    }
    return list;
}

public action start() {
    objlist = obj[];
    objid=0;
}

public action update(num delta) {
	tnow = g_tnow;

    # Broadcast Synced Objects data
    if ((tnow - tlastbroadcast) > SYNC_INTERVAL) {
        tlastbroadcast = tnow;
        # str encodedobjdata = objencoding();
        # str encodedobjdata = b91_encode(objsToByteArray(objlist,false)); # send new data only
        # bool success = GAME.NETWORK.broadcast("sync", {data:objdata});
        obj[] plrs = GAME.PLAYERS.list();
        bool success=true;
        for (num i = 0; i < lengthOf plrs; i++) {

            obj plr = plrs[i];
            str datatosend = "";
            bool reset = false;
            # guard for initializing netdata
            if ((str) plr.netdata == "undefined" || (bool) plr.netreset == true)
            {
                reset = true;
            }
            if ((str)plr.netdata == "" || (str) plr.netdata == "undefined" || (bool) plr.netreset == true){
                plr.netdata = b91_encode(objsToByteArray(objlist,reset,plr,plrs)); # resend all data regardless of age
                plr.netdatalen = Math.ceil((lengthOf (str)plr.netdata) / MAXLEN_NETDATA);
                if (reset) {
                    GAME.log(syncobjs_h_byteArrayToObjs(b91_decode((str)plr.netdata)));
                }
                

                # check size of encoded data is too large and warn
                if (lengthOf (str)plr.netdata > MAXLEN_NETDATA){
                    num netneeded = Math.ceil((lengthOf (str)plr.netdata) / MAXLEN_NETDATA);
                    num t_fps = 1000/(SYNC_INTERVAL * netneeded);
                    if (t_fps < DESIRED_FPS){
                        GAME.log("WARN: data length is ", lengthOf (str)plr.netdata);
                        GAME.log("takes ", SYNC_INTERVAL * netneeded, "ms to send update or FPS is  ", t_fps);
                    }
                }
            } 
            
            
            # plr.netdatalen = Math.ceil((lengthOf encodedobjdata) / MAXLEN_NETDATA);
            
            # fill network data if it DNE yet
            # if (lengthOf (str) plr.netdata == 0)
            # {
                # plr.netdata = encodedobjdata;
                # plr.netdatalen = Math.ceil((lengthOf encodedobjdata) / MAXLEN_NETDATA);
            # }
            # send over netdata in the max size allowed
            if (lengthOf (str) plr.netdata > MAXLEN_NETDATA){
                datatosend = strutils_splice((str)plr.netdata,0,MAXLEN_NETDATA);
                plr.netdata = strutils_splice((str)plr.netdata,MAXLEN_NETDATA,lengthOf (str)plr.netdata);
                
            } else {
                datatosend = (str) plr.netdata;
                plr.netdata = "";
            }
            
        
            # pcnt is percentage of load complete
            num pcnt = Math.floor(( 1 - ((lengthOf (str) plr.netdata) / ((num)plr.netdatalen * MAXLEN_NETDATA)))*100);
            # success = GAME.NETWORK.send("sync", {d:datatosend, dellist:newdellist,pcnt:pcnt,rst:(bool)plr.netreset ? 1:0}, (str)plrs[i].id);    
            success = GAME.NETWORK.send("sync", {d:datatosend,pcnt:pcnt,rst:(bool)plr.netreset ? 1:0}, (str)plrs[i].id);    
            if (!success) {
                GAME.log("ERROR: sync not sent!!!");
                GAME.log({d:datatosend,pcnt:pcnt,rst:(bool)plr.netreset ? 1:0});
                # GAME.log({d:datatosend, dellist:newdellist,pcnt:pcnt,rst:(bool)plr.netreset ? 1:0});
            } 
        }

        # find all objects that are fully deleted (sent delete to all players)
        for (num i = lengthOf objlist - 1; i >= 0; i--)
        {
            obj tObj = objlist[i];
            if ((str)tObj.del != "undefined" && (bool)tObj.del == true){
                if (lengthOf (str[])tObj.delplrids >= lengthOf plrs){
                    remove objlist[i];
                }
            }
        }

        # if (success) {
        #     newdellist = num[];
        # }
    }
}

# Runs when the round ends
public action onGameEnd() {
    deleteAllObjs();
    # delete all objects client side
    GAME.NETWORK.broadcast("clear", {});
}

public action onNetworkMessage(str id, obj data, str playerID) {
    if (id == "refreshobjs"){
        obj plr = GAME.PLAYERS.findByID(playerID);
        plr.netreset = true;
    }
}