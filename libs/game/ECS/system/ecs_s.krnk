#include <syncobjs_s.krnk>
#include <AABB.krnk>
#include <ecs_h.krnk>


# ===================================================================
# private actions by blandrice
# ===================================================================
#privateactions
# ===================================================================
# Library: \libs\ECS\ecs_s.krnk
# Author: blandrice
#   Description: Entity! Component!! System!!!
# ===================================================================

# Entities: obj list
# Components: separate "components" libraries
# Systems: public + private action hooks!



public action update(num delta){

    obj[] world = GAME.OBJECTS.list();
    obj[] worldedit = obj[]; # edits to make 

    # simpler world position and scale system
    for (num i = 0; i < lengthOf world; i++){
            obj wcube = {
                position:{
                    x:(num)world[i].position.x,
                    y:(num)world[i].position.y - (num)world[i].scale.y,
                    z:(num)world[i].position.z
                },
                scale: {
                    x:(num)world[i].scale.x*2,
                    y:(num)world[i].scale.y*2,
                    z:(num)world[i].scale.z*2
                }
            };
        addTo worldedit wcube;
    }

    # loop through object list
    for (num i = 0; i < lengthOf syncobjs_s_objlist; i++)
    {
        obj tobj = syncobjs_s_objlist[i];
        
        # CUSTOM ACTION THAT BUNDLES ALL UPDATE EVENTS
        onECSUpdate(delta, tobj, syncobjs_s_objlist);
        if (notEmpty (obj) tobj.collide)
        {
            num coltype = (num) tobj.collide.type;
            if ((coltype & AABB_COL_WORLD) > 0)
            {
                # resolve collision. currently default will stop object (vel = 0)
                obj[] res = AABB_resolve(tobj,worldedit);
                # CUSTOM ACTION THAT BUNDLES ALL COLLISION EVENTS
                onCollideWorld(tobj,res);
            }
            if ((coltype & AABB_COL_PLRS) > 0)
            {
                # GAME.log("collision type col_plrs detected");
                # resolve collision. currently detects face but does NOT stop
                obj[] plrs = GAME.PLAYERS.list();
                obj[] res = AABB_detectCollisions(tobj,plrs);
                if (lengthOf res > 0){
                    # GAME.log("collision detected");
                    onCollidePlrs(tobj,res);    
                }
            }
            
        }
        

        

        if ((str) tobj.debug == "1"){
            GAME.log(tobj);
        }
    } 


}

public action onNetworkMessage(str id, obj data, str playerID) {

}

# private action onCollide(obj tobj, obj[] objlist){
# }

# private action onECSUpdate(num delta, obj tobj, obj[] objlist){
# }

# private action onPlayerCollision(){???
#     obj[] plrs = GAME.PLAYERS.list();
#     for (num i = 0; i < lengthOf plrs; i++){
#     }
# }

# private action onCollideWorld(obj tobj, obj[] collist){}