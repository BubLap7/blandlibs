# ===================================================================
# File: libs\doublejump\djregistersync\r_djumpclient.krnk
# Author: blandrice
# ===================================================================

#include <DJcfg_nodes_h.krnk>
#include <AABB.krnk>


num COOLDOWN = 2000;
num W = 0.3;
str COLOR_JUMP = "#E2FF00";
num ACQUIREJUMPSOUND = 49683;
num DJUMPSOUND = 32576;

num djalpha = 0;

public action onPlayerSpawn(str id) {
	obj player = GAME.PLAYERS.findByID(id);

    # nodes
    player.nodes = GAME.OBJECTS.getPathNodes();
    for (num i = 0; i < lengthOf (obj[]) player.nodes; i++) {
        obj[] nodes = (obj[]) player.nodes;
        obj inode = nodes[i];
        inode.tCooldown = 0;
        inode.scale = {x:5,y:5,z:5};
        inode.position = {x:inode.x,y:inode.y,z:inode.z};
    }
    # player jump
    player.timeLastCrouched = 0;
    player.jumpCount = 0;
    player.hasJumped = false;
    player.registerSyncValues("timeLastCrouched");
    player.registerSyncValues("timeLastOnGround");
    player.registerSyncValues("jumpCount");
    player.registerSyncValues("hasJumped");
    player.registerSyncValues("nodes");

    
}

public action onPlayerUpdate(str id, num delta, obj inputs) {
	obj player = GAME.PLAYERS.findByID(id);
    
    # crouch
    if ((bool) player.crouch){
        player.scale = 
        {
            x:AABB_w,
            y:AABB_c,
            z:AABB_w
        };
    } else {
        player.scale=
        {
            x:AABB_w,
            y:AABB_H,
            z:AABB_w
        };
    }
    # collisions with nodes
    obj[] collisions = AABB_detectCollisions(player,(obj[])player.nodes);
    if (lengthOf collisions > 0)
    {
        for (num i = 0; i < lengthOf collisions; i++)
        {
            obj colobj = collisions[i];
            if ((num)colobj.tCooldown == 0)
            {
                # add jump
                (num)player.jumpCount+=1;
                # increase tCooldown to refresh rate
                colobj.tCooldown = COOLDOWN;
                # acquire jump sound
                if ((num) DJcfg_nodes_h_c.ACQUIREJUMPSOUND > 0) {
                    GAME.SOUND.play2D((num) DJcfg_nodes_h_c.ACQUIREJUMPSOUND, 1, 1, false); 
                }
            }
        }
    }
    # decrement nodes cooldown and color
    for (num i = 0; i < lengthOf (obj[]) player.nodes; i++) {
        obj inode = ((obj[]) player.nodes)[i];
        (num)inode.tCooldown -= delta;
        if ((num)inode.tCooldown < 0)
        {
            inode.tCooldown=0;            
        }
    }
    
    # Double-Jump stuff

    # crouch timestamp
    if ((bool) inputs.crouch) 
    {
        player.timeLastCrouched = 0;
    } 
    else 
    {
        (num) player.timeLastCrouched += delta;
    }
    # reset jumpcount on ground
    if((bool) player.onGround) 
    {
        player.jumpCount = (num) DJcfg_nodes_h_c.MAX_JUMPCOUNT-1;
        player.timeLastOnGround = 0;
    } 
    else
    {
        (num) player.timeLastOnGround += delta;
    } 
    #  reset jumpCount after walljump
     if ((bool) DJcfg_nodes_h_c.WALLJUMP_REFRESHS && (bool) player.onWall && (bool) inputs.jump) 
    {
        player.jumpCount = (num) DJcfg_nodes_h_c.MAX_JUMPCOUNT-1;
    } 
    # input jump logic
    if((bool) inputs.jump) {
        if(!(bool)player.hasJumped  && (num)player.jumpCount > 0 && !(bool)player.onGround && ((num)player.timeLastOnGround > 150)) 
        {
            if (!(bool) player.onWall && (bool)DJcfg_nodes_h_c.WALLJUMP_REFRESHS) 
            {
                if ((bool) DJcfg_nodes_h_c.ENABLE_CROUCHJUMP && ((num)player.timeLastCrouched < (num)DJcfg_nodes_h_c.MS_DURATION_UNCROUCH)) 
                {
                    player.velocity.y = Math.lerp((num) DJcfg_nodes_h_c.VEL_CROUCHJUMP,(num) DJcfg_nodes_h_c.VEL_JUMP,(num)player.timeLastCrouched/(num) DJcfg_nodes_h_c.MS_DURATION_UNCROUCH);	# "moonjumping" calculation
                } else 
                {
                    player.velocity.y = (num) DJcfg_nodes_h_c.VEL_JUMP;	
                }
                if ((num) DJcfg_nodes_h_c.DJUMPSOUND > 0) 
                {
                    GAME.SOUND.play2D((num) DJcfg_nodes_h_c.DJUMPSOUND, 1, 0.5, false); # jump DJcfg_nodes_h_c.SOUND
                }

                (num)player.jumpCount--;
            }
        }
        player.hasJumped = true;
    }
    else {
        player.hasJumped = false;
    }
}