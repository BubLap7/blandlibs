#include <syncobjs_c.krnk>
#include <plrutil_c.krnk>
#include <AABB.krnk>
#include <plrbhvr_c.krnk>
#include <gamestart_c.krnk>

# ===================================================================
# Library: \libs\ECS\ecs_c.krnk
# Author: blandrice
#   Description: Entity! Component! System!!!
# ===================================================================

bool cr = false;
num MAXWALKSPEED = 0.04;
num tnow = 0;

public action onPlayerUpdate(str id, num delta, obj inputs) {
    tnow = GAME.TIME.now();
    cr = (bool)inputs.crouch;
    obj tPlr = GAME.PLAYERS.findByID(id);
    
    if (notEmpty tPlr) {
        obj[] res = AABB_resolveplr(tPlr,cr,syncobjs_c_objlist);
        if ((str)tPlr.tOnObjIdle == "undefined"){
            tPlr.tOnObjIdle = 0;
        } 
        if ((str)tPlr.tOnObjMov == "undefined"){
            tPlr.tOnObjMov = 0;
        } 
        for (num i = 0; i < lengthOf res; i++){
            obj cdata = res[i];
            num colside = (num) cdata.colside;
            obj cobj = (obj)cdata.colobj;

            if (colside == AABB_YNEG){
                if ((str)inputs.movDir !="undefined"){
                    if ((num)tPlr.tOnObjMov == 0)
                    {
                        tPlr.tOnObjMov = tnow;
                        tPlr.tOnObjIdle = 0;
                    } 
                    num movDir = (num)inputs.movDir;
                    movDir -= ((num)inputs.mouseX);
                    # velocity relative to moving platform
                    if (Math.abs((num) cobj.velocity.x) > 0) {
                        tPlr.velocity.x = (num)cobj.velocity.x + (MAXWALKSPEED * Math.cos(movDir)) * (tnow-(num)tPlr.tOnObjMov)/((tnow-(num)tPlr.tOnObjMov)+100) ;
                    }
                    if (Math.abs((num) cobj.velocity.z) > 0) {
                        tPlr.velocity.z = (num)cobj.velocity.z + (MAXWALKSPEED * Math.sin(movDir)) * (tnow-(num)tPlr.tOnObjMov)/((tnow-(num)tPlr.tOnObjMov)+100) ;
                    }
                }
                else
                {
                    if ((num)tPlr.tOnObjIdle ==0) 
                    {
                        tPlr.tOnObjIdle = tnow;
                        tPlr.tOnObjMov = 0;
                    } 
                    # deccelerate relative to moving platform
                    if (Math.abs((num) cobj.velocity.x) > 0) {
                        (num) tPlr.velocity.x += ((num)cobj.velocity.x - (num)tPlr.velocity.x) * (tnow-(num)tPlr.tOnObjIdle)/((tnow-(num)tPlr.tOnObjIdle)+150);
                    } 
                    if (Math.abs((num) cobj.velocity.z) > 0) {
                        (num) tPlr.velocity.z += ((num)cobj.velocity.z - (num)tPlr.velocity.z) * (tnow-(num)tPlr.tOnObjIdle)/((tnow-(num)tPlr.tOnObjIdle)+150);
                    } 
                } 
            }   
        }
    }
}
