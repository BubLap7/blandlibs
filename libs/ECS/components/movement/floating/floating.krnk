#include <g.krnk>
# ===================================================================
# Library: libs\ECS\components\movement\floating\floating.krnk
# Author: blandrice
#   Description: floating platforms component
# ===================================================================

num action applysin(obj tobj, str dim, num t)
{
    num offset = (num)tobj.floating.offset;
    if (dim=="x")
    {
        return (num)tobj.floating.ogpos.x + ((num)tobj.floating.amplitude.x* Math.sin((((Math.PI2)*t) / (num)tobj.floating.t_msinterval)+(Math.PI2*offset)));
    } 
    else if (dim=="y")
    {
        return (num)tobj.floating.ogpos.y + ((num)tobj.floating.amplitude.y* Math.sin((((Math.PI2)*t) / (num)tobj.floating.t_msinterval)+(Math.PI2*offset)));
    }
    else if (dim=="z")
    {
        return (num)tobj.floating.ogpos.z + ((num)tobj.floating.amplitude.z* Math.sin((((Math.PI2)*t) / (num)tobj.floating.t_msinterval)+(Math.PI2*offset)));
    }
    return 0;
}

num action applycos(obj tobj, str dim, num t)
{
    num offset = (num)tobj.floating.offset;
    if (dim=="x")
    {
        return (num)tobj.floating.ogpos.x + ((num)tobj.floating.amplitude.x * (num)tobj.floating.cc * Math.cos((((Math.PI2)*t) / (num)tobj.floating.t_msinterval)+(Math.PI2*offset)));
    } 
    else if (dim=="y")
    {
        return (num)tobj.floating.ogpos.y + ((num)tobj.floating.amplitude.y * (num)tobj.floating.cc * Math.cos((((Math.PI2)*t) / (num)tobj.floating.t_msinterval)+(Math.PI2*offset)));
    }
    else if (dim=="z")
    {
        return (num)tobj.floating.ogpos.z + ((num)tobj.floating.amplitude.z * (num)tobj.floating.cc * Math.cos((((Math.PI2)*t) / (num)tobj.floating.t_msinterval)+(Math.PI2*offset)));
    }
    return 0;
}

action addComponent(obj tobj, obj props)
{
    tobj.floating=
    {
        ogpos:{x:(num)props.ogpos.x,y:(num)props.ogpos.y,z:(num)props.ogpos.z},
        amplitude: {x:(num)props.amplitude.x,y:(num)props.amplitude.y,z:(num)props.amplitude.z},
        t_msinterval: (num)props.t_msinterval,
        type: {x:(str)props.type.x,y:(str)props.type.y,z:(str)props.type.z},
        offset: ((str)props.offset != "undefined") ? (num) props.offset: 0,
        cc: ((str)props.cc != "undefined") ? -1: 1,
        _tstart: g_tnow
    };
}

private action onECSUpdate(num delta, obj tobj, obj[] objlist){
if (notEmpty (obj) tobj.floating) 
    {

        num t = (g_tnow - (num)tobj.floating._tstart);
        if (t > (num)tobj.floating.t_msinterval)
        {
            tobj.floating._tstart = g_tnow;
        }
        
        if ((num)tobj.floating.amplitude.x !=0)
        {
            if ((str)tobj.floating.type.x=="sine")
            {
                tobj.position.x = applysin(tobj,"x",t);
            } 
            else if ((str)tobj.floating.type.x=="cos")
            {
                tobj.position.x = applycos(tobj,"x",t);
            }
        }
        if ((num)tobj.floating.amplitude.y !=0)
        {
            if ((str)tobj.floating.type.y=="sine")
            {
                tobj.position.y = applysin(tobj,"y",t);
            } 
            else if ((str)tobj.floating.type.y=="cos")
            {
                tobj.position.y = applycos(tobj,"y",t);
            }
        }
        if ((num)tobj.floating.amplitude.z !=0)
        {
            if ((str)tobj.floating.type.z=="sine")
            {
                tobj.position.z = applysin(tobj,"z",t);
            } 
            else if ((str)tobj.floating.type.z=="cos")
            {
                tobj.position.z = applycos(tobj,"z",t);
            }
        }
        else # default is no movement
        {
        }

    }
}