{"map":{"name":"platforms_template","ambient":"#97a0a8","light":"#f2f8fc","sky":"#dce8ed","fog":"#8d9aa0","fogD":2000,"xyz":[100,10,1059,7,11,7,5,5,5,40,0.01,10,5000,10,5000,50,10,50],"objects":[{"p":[-7,17,0],"meshUUID":"0ebc6fd2-8b5a-4a66-9271-b87d8a367c5e","objUUID":"0c731f3e-7ef0-4719-80da-d42798c5c1f2","o":0.8,"si":0},{"p":[0,27,0],"meshUUID":"35a4e9ca-63e3-4e88-a0db-bff26af383cf","objUUID":"15e6ec6b-a468-42f3-b327-d42143e264f0","i":5,"tm":0,"si":1},{"p":[46,32,-194],"meshUUID":"fd186ae2-8617-4497-87ac-c2367f8a87e1","objUUID":"f5fdff29-b6a6-4807-885a-ca2a363b53b6","i":64,"l":1,"nid":201,"si":2},{"p":[46,32,-80],"meshUUID":"a3f87a0d-609f-49f0-9ed6-8a92ddd3008d","objUUID":"8ea648bb-b592-4ac0-9468-b811371b334d","i":64,"l":1,"nid":301,"si":2},{"p":[46,32,37],"meshUUID":"2cc4b793-0aa8-4aca-b8cf-78852f8bdfd7","objUUID":"8e9666e4-6073-44f7-94b5-9dd9e40c865c","i":64,"l":1,"nid":401,"si":2},{"p":[46,32,203],"meshUUID":"23eff5f0-d705-4d7e-b2ae-8ed7025f3028","objUUID":"4f3db29a-db86-4d6c-ac25-a8001d2e0b62","i":64,"l":1,"nid":501,"si":2},{"p":[47.95,35,-194.01],"meshUUID":"f12d4d92-9fc8-4803-b81a-c8edccef4b08","objUUID":"aa834df2-ec03-4707-8298-a0b4da6c15de","i":30,"r":[1.57,0,1.57],"st":"Z_LIN_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[48,35.05,-80],"meshUUID":"438863a3-35b0-4918-bbfa-4ae525d00dee","objUUID":"012e9909-b941-4331-b162-8c206053ada1","i":30,"r":[1.57,0,1.57],"st":"VERT_CIRCLEX_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[48.04,35.09,37],"meshUUID":"b9369c0f-e66e-40ac-82e5-0e6206d4a2cd","objUUID":"59ccbbc3-7bb0-4c9d-b965-75839ca345d0","i":30,"r":[1.57,0,1.57],"st":"VERT_CIRCLEZ_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[48.07,35.12,202.93],"meshUUID":"e9016a18-6729-48c6-adbd-b849d891e163","objUUID":"6298bd43-b174-4c34-a223-1586b047b56a","i":30,"r":[1.57,0,1.57],"st":"HOR_CIRCLE_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[46,32,-366],"meshUUID":"422572d0-72fa-4c8e-932b-e5d4cccfe2bc","objUUID":"d6869632-279c-4f36-a3cc-0c168e9ad867","i":64,"l":1,"si":2},{"p":[47.95,35,-366.07],"meshUUID":"192f8338-d938-46ee-b7df-de0d3a67227e","objUUID":"eb077eb8-0dc5-4243-a8f9-1b0feeef20bb","i":30,"r":[1.57,0,1.57],"st":"X_LIN_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[46,32,-296],"meshUUID":"eebc208a-79cc-406a-9d47-222ea3fce716","objUUID":"a13ae9a6-3ec9-48a9-9ef8-be20a8e6c6dd","i":64,"l":1,"nid":101,"si":2},{"p":[47.95,35,-296.01],"meshUUID":"f0a79f97-b9e7-483f-908b-b3002e62f528","objUUID":"d68fa617-6927-45b6-b5ad-171bb20f0974","i":30,"r":[1.57,0,1.57],"st":"Y_LIN_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[0,-28,0],"meshUUID":"0f027443-edce-42e9-a210-5bfb2d340d04","objUUID":"aa96da64-3cd0-4b6d-bed7-d1964b00a3dd","i":27,"tm":0,"m":1,"tcp":1,"si":4},{"p":[0,27,0],"meshUUID":"d3086935-0836-4166-948a-ce191d722970","objUUID":"7530de3e-7470-42c1-a815-060b3ab7f157","i":25,"tm":0,"si":5}],"config":{"classes":[9],"settings":{"maxPlayers":20,"gameTime":0}},"scripts":{"client":"","server":""}},"groups":{},"cam":{"p":[-110.05002453863513,135.6730902014239,-289.78611981812156],"r":[-0.45599999999999863,-1.9940000000000118]},"history":[]}