{"map":{"name":"plats_test","ambient":"#97a0a8","light":"#f2f8fc","sky":"#dce8ed","fog":"#8d9aa0","fogD":2000,"xyz":[532,10,1059,7,11,7,5,5,5,40,0.01,10,5000,10,5000,50,10,50,38,0.01,10,30,85,30,110,5,30,30,5,110,110,85,30,30,85,110,110,5,110,111,7,111,111,87,31,41.08,87,111],"colors":["#CC00C0"],"objects":[{"p":[0,0,0],"meshUUID":"0ebc6fd2-8b5a-4a66-9271-b87d8a367c5e","objUUID":"0c731f3e-7ef0-4719-80da-d42798c5c1f2","si":0},{"p":[-38,10,0],"meshUUID":"35a4e9ca-63e3-4e88-a0db-bff26af383cf","objUUID":"15e6ec6b-a468-42f3-b327-d42143e264f0","i":5,"tm":0,"si":1},{"p":[48,11,-194],"meshUUID":"fd186ae2-8617-4497-87ac-c2367f8a87e1","objUUID":"f5fdff29-b6a6-4807-885a-ca2a363b53b6","i":64,"l":1,"nid":201,"si":2},{"p":[50,51,-80],"meshUUID":"a3f87a0d-609f-49f0-9ed6-8a92ddd3008d","objUUID":"8ea648bb-b592-4ac0-9468-b811371b334d","i":64,"l":1,"nid":301,"si":2},{"p":[49,51,37],"meshUUID":"2cc4b793-0aa8-4aca-b8cf-78852f8bdfd7","objUUID":"8e9666e4-6073-44f7-94b5-9dd9e40c865c","i":64,"l":1,"nid":401,"si":2},{"p":[50,11,203],"meshUUID":"23eff5f0-d705-4d7e-b2ae-8ed7025f3028","objUUID":"4f3db29a-db86-4d6c-ac25-a8001d2e0b62","i":64,"l":1,"nid":501,"si":2},{"p":[49.95,14,-194.01],"meshUUID":"f12d4d92-9fc8-4803-b81a-c8edccef4b08","objUUID":"aa834df2-ec03-4707-8298-a0b4da6c15de","i":30,"r":[1.57,0,1.57],"st":"Z_LIN_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[52,54.05,-80],"meshUUID":"438863a3-35b0-4918-bbfa-4ae525d00dee","objUUID":"012e9909-b941-4331-b162-8c206053ada1","i":30,"r":[1.57,0,1.57],"st":"VERT_CIRCLEX_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[51.04,54.09,37],"meshUUID":"b9369c0f-e66e-40ac-82e5-0e6206d4a2cd","objUUID":"59ccbbc3-7bb0-4c9d-b965-75839ca345d0","i":30,"r":[1.57,0,1.57],"st":"VERT_CIRCLEZ_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[52.07,14.12,202.93],"meshUUID":"e9016a18-6729-48c6-adbd-b849d891e163","objUUID":"6298bd43-b174-4c34-a223-1586b047b56a","i":30,"r":[1.57,0,1.57],"st":"HOR_CIRCLE_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[50,11,-366],"meshUUID":"422572d0-72fa-4c8e-932b-e5d4cccfe2bc","objUUID":"d6869632-279c-4f36-a3cc-0c168e9ad867","i":64,"l":1,"si":2},{"p":[51.95,14,-366.07],"meshUUID":"192f8338-d938-46ee-b7df-de0d3a67227e","objUUID":"eb077eb8-0dc5-4243-a8f9-1b0feeef20bb","i":30,"r":[1.57,0,1.57],"st":"X_LIN_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[48,51,-296],"meshUUID":"eebc208a-79cc-406a-9d47-222ea3fce716","objUUID":"a13ae9a6-3ec9-48a9-9ef8-be20a8e6c6dd","i":64,"l":1,"nid":101,"si":2},{"p":[49.95,54,-296.01],"meshUUID":"f0a79f97-b9e7-483f-908b-b3002e62f528","objUUID":"d68fa617-6927-45b6-b5ad-171bb20f0974","i":30,"r":[1.57,0,1.57],"st":"Y_LIN_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[0,-21,0],"meshUUID":"0f027443-edce-42e9-a210-5bfb2d340d04","objUUID":"aa96da64-3cd0-4b6d-bed7-d1964b00a3dd","i":27,"tm":0,"m":1,"tcp":1,"si":4},{"p":[-38,10,0],"meshUUID":"d3086935-0836-4166-948a-ce191d722970","objUUID":"7530de3e-7470-42c1-a815-060b3ab7f157","i":25,"tm":0,"si":5},{"p":[-150,11,-366],"meshUUID":"926c38aa-5942-469e-989b-b9f8aab89f33","objUUID":"7a621e4f-e20f-4b01-a9ff-ccfbc5df9218","i":64,"l":1,"nid":51,"si":2},{"p":[-148.71,14,-366.06],"meshUUID":"35880ac0-c3c1-4084-9219-81cd89fd4a8d","objUUID":"83c46467-5586-450d-a800-977eac63c3a5","i":30,"r":[1.57,0,-1.57],"st":"X_LIN_0_5_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[-146,51,-296],"meshUUID":"dd8b25db-b7cf-4493-9c73-46c60ba7ebd3","objUUID":"2fa34afd-2d6a-4d52-90f0-08a7cd9e1893","i":64,"l":1,"nid":151,"si":2},{"p":[-150,54,-295.94],"meshUUID":"a7936ffd-0a86-464e-9277-373a856fa1b7","objUUID":"598b4602-8f11-4a42-be87-c09fd598f9b6","i":30,"r":[1.57,0,-1.57],"st":"Y_LIN_0_5_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[-122,11,-194],"meshUUID":"4ccc0dd0-4dc0-4279-93d9-c840a4d14deb","objUUID":"2039494f-cbf8-4224-a46b-1d79a4f7d08f","i":64,"l":1,"nid":251,"si":2},{"p":[-150,14,-193.95],"meshUUID":"88efb23a-a1dc-4b5d-9bf1-e6a9ed676702","objUUID":"cc7327bb-67b3-48c3-9f1d-d6c87a38fc36","i":30,"r":[1.57,0,-1.57],"st":"Z_LIN_0_5_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[-150,51,-80],"meshUUID":"ccc42296-d3cc-436b-8f61-f455a9cb19eb","objUUID":"046b10bb-685b-4f98-8ee4-dc64cf8a4694","i":64,"l":1,"nid":351,"si":2},{"p":[-154,54.05,-80],"meshUUID":"fb14785a-1865-4e58-819b-2ee321fe3daa","objUUID":"3c10eeda-a9d3-450a-b4c2-e8aa5c28b68e","i":30,"r":[1.57,0,-1.57],"st":"VERT_CIRCLEX_0_5_PLAT","bv":1,"sf":52,"sa":1,"si":6},{"p":[-152,51,37],"meshUUID":"e812e3e5-6147-4c1d-ae80-deaf5e83441d","objUUID":"aa52425c-b352-4ed9-b750-88d99192b948","i":64,"l":1,"nid":451,"si":2},{"p":[-149.96,54.09,37],"meshUUID":"6ec55d54-1ce2-421b-821a-2e2e265a4526","objUUID":"32c6709d-ae69-41e1-bba9-25a2045c0e41","i":30,"r":[1.57,0,-1.57],"st":"VERT_CIRCLEZ_0_5_PLAT","bv":1,"sf":57,"sa":1,"si":3},{"p":[-150,11,203],"meshUUID":"c17b1e6b-67cb-4383-bdbf-f35667908ce1","objUUID":"9980a9b2-42f1-4d5d-b0fc-a6d7acdd6d5c","i":64,"l":1,"nid":551,"si":2},{"p":[-147.93,14.12,202.93],"meshUUID":"a4314c74-e18c-46f0-964a-86af845c941d","objUUID":"53c99d02-b7c7-4e47-acec-3c53c2e302f5","i":30,"r":[1.57,0,-1.57],"st":"HOR_CIRCLE_0_5_PLAT","bv":1,"sf":66,"sa":1,"si":3},{"p":[48,11,-296],"meshUUID":"c10c390f-d1c7-4ead-9059-b10a81cc2de6","objUUID":"f600d877-e5f4-40ee-ba91-5a240207934b","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":7},{"p":[-146,11,-296],"meshUUID":"fbe81d09-f7b5-4477-96f9-1ad5a7a3c976","objUUID":"7fe52fdd-95d4-4892-bdd9-aaf1cd5d1485","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":7},{"p":[-150,11,-366],"meshUUID":"5a9b7bff-ca9d-4abc-aee7-15b46448403a","objUUID":"7361e72e-e6ed-45b2-908a-a5f4c06111a6","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":8},{"p":[50,11,-366],"meshUUID":"9d690e2a-e48c-4a24-973f-0dc2ac629fb0","objUUID":"cb8ca87a-6bc4-424c-9b8f-ad98508f4d7c","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":8},{"p":[48,11,-194.01],"meshUUID":"0956b0c0-e7b3-4617-a5b7-370407166c10","objUUID":"64f74ba7-eed6-4664-8450-3be141258424","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":9},{"p":[-122,11,-194.01],"meshUUID":"6c37e6ca-7eba-42a7-a780-ed1e0d0e65be","objUUID":"8283677b-4107-4545-9f0e-c02e72605f52","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":9},{"p":[50,11,-80],"meshUUID":"3b24c6a5-2e43-4ab0-8d21-bcf284989e00","objUUID":"7417ee38-04a4-4f9f-bd7b-5b3948c29b82","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":10},{"p":[-150,11,-80],"meshUUID":"91c5bd08-a90d-49a8-8ffe-d7e8329edb59","objUUID":"2ba025b9-76d2-4a46-950e-58b40b310b74","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":10},{"p":[49,11,37],"meshUUID":"f369a65e-ff40-4031-a7d8-223c8ad42a48","objUUID":"aea35520-153c-45d5-83c8-01b7e46e7110","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":11},{"p":[-152,11,37],"meshUUID":"2b64bce8-2823-4c16-b806-46e25387785d","objUUID":"98a8861d-4541-4214-bba1-ca94d4b3216a","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":11},{"p":[50,11,203],"meshUUID":"a77a4e72-03d9-414b-a5cb-ebaa5f38b1ce","objUUID":"fd1d49a1-34a9-4dde-8bf3-d199fd7b53b8","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":12},{"p":[-150,11,203],"meshUUID":"418ccdf4-0015-4b9f-b224-54726edc6dda","objUUID":"dadb9997-1025-4e44-9ba7-d93e217d52eb","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":12},{"p":[50,10,203],"meshUUID":"493c2716-93c4-4496-a634-b2d3363964de","objUUID":"ff5e1b15-76d9-4e50-bbd7-29fbc54aa9c9","i":35,"si":13},{"p":[50,11,350],"meshUUID":"d7e27226-c4ea-47f7-aa3e-dee4a0ec9143","objUUID":"49c438c9-f2b1-4224-a58c-28fed2b89cb3","i":64,"l":1,"nid":601,"si":2},{"p":[52.07,14.12,349.93],"meshUUID":"afb40494-d2c5-45e5-b7eb-68ca02e0b92e","objUUID":"9cde0ac4-5419-4d0b-a79b-8c5b8f0b4298","i":30,"r":[1.57,0,1.57],"st":"HOR_CIRCLE_CC_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[50,11,350],"meshUUID":"4a375cf4-b307-425f-88d3-044f3ff573b0","objUUID":"60816c00-2502-421e-bd0e-aa209e287871","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":12},{"p":[50,10,350],"meshUUID":"25ca7813-b506-4753-ba13-3bdd6707173d","objUUID":"bf3b9c71-fd33-43e5-9c6d-331ac877af1b","i":35,"si":13},{"p":[-150,10,203],"meshUUID":"ef114562-aec7-4415-b987-97ab28bc01aa","objUUID":"828eaa92-32ba-4a5b-b8a1-d4359c5524a0","i":35,"si":13},{"p":[-150,11,350],"meshUUID":"51ce432e-99f4-47cf-a329-1a537353b425","objUUID":"496e1e7d-a0ec-4f33-87b5-ecaa692c38ac","i":64,"l":1,"nid":651,"si":2},{"p":[-147.93,14.12,349.93],"meshUUID":"f63c26e9-0a27-4f95-af08-4b44fd2c11ae","objUUID":"931d619a-fd6f-4995-bbc7-40b1e9969850","i":30,"r":[1.57,0,-1.57],"st":"HOR_CIRCLE_0_5__CC_PLAT","bv":1,"sf":66,"sa":1,"si":3},{"p":[-150,11,350],"meshUUID":"35d2f234-500c-44d7-bdc6-09dcad7a505d","objUUID":"344c86da-90c1-4e0d-a632-16e445f6e6cb","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":12},{"p":[-150,10,350],"meshUUID":"dda818ff-b7bc-478e-b4d2-366b3888f2f9","objUUID":"12289831-a714-48bf-a768-9dba5e408d2a","i":35,"si":13},{"p":[50,10,-80],"meshUUID":"8d55049a-8155-4d8d-bb99-0ce960c1e9d4","objUUID":"baa7b0f0-7018-4afb-810b-368b4c8d18d6","i":35,"si":14},{"p":[186,51,-80],"meshUUID":"54e12a9b-e299-4e3b-9542-45eb071001d4","objUUID":"e40aab9d-0d23-4a05-b1b9-816068281351","i":64,"l":1,"nid":701,"si":2},{"p":[188,54.05,-80],"meshUUID":"9d877895-1634-4cba-8ae0-3d6adbfdce3d","objUUID":"a885b7d8-74ef-47f7-9f42-517f58b3f524","i":30,"r":[1.57,0,1.57],"st":"VERT_CIRCLEX_CC_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[186,11,-80],"meshUUID":"e1fc0070-fe0f-496c-84f2-383e7297edeb","objUUID":"43d7d586-a16e-4e12-bf0f-a42b6a7a7b0c","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":10},{"p":[186,10,-80],"meshUUID":"205984bc-51f4-42b5-8fcc-a64e31afbc63","objUUID":"9f9a2a32-b386-476c-a56c-660c806e6120","i":35,"si":14},{"p":[-150,10,-80],"meshUUID":"e82222d5-c855-4ae5-8995-75b5bd755a8f","objUUID":"7ab79dc0-30d3-4038-b8ba-15755cda97d4","i":35,"si":14},{"p":[-282,51,-80],"meshUUID":"b8f32724-5f4c-4129-9d9f-1682476fed08","objUUID":"cbb5f097-7f8a-48e3-a227-49c5355e013d","i":64,"l":1,"nid":751,"si":2},{"p":[-286,54.05,-80],"meshUUID":"30e43e38-8bbb-4128-ab38-27653e65efd2","objUUID":"04236131-1748-44b9-bb7a-29f5328f23d5","i":30,"r":[1.57,0,-1.57],"st":"VERT_CIRCLEX_CC_0_5_PLAT","bv":1,"sf":52,"sa":1,"si":6},{"p":[-282,11,-80],"meshUUID":"daded675-9d9e-4fe6-b9b0-308f5ab51a17","objUUID":"40b9dd36-6ff9-45c3-a1ea-afc4b55ff0dc","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":10},{"p":[-282,10,-80],"meshUUID":"4ca2014e-12ea-4851-8677-57bc8b2eb8ab","objUUID":"80ffc61a-1fda-405b-bd34-037e66d29716","i":35,"si":14},{"p":[51,10,37],"meshUUID":"b0c8c79f-44b5-4e57-82fb-c8291c202370","objUUID":"4c85c59d-9527-41e2-a433-59ad4a9a046a","i":35,"si":15},{"p":[135,51,37],"meshUUID":"ce73fb97-bbcb-41d1-b18c-6b5fbbd082d0","objUUID":"7227f0f9-0d27-4c6b-b4c2-4ce836b40698","i":64,"l":1,"nid":801,"si":2},{"p":[137.04,54.09,37],"meshUUID":"89246411-f42d-4205-9738-d97fe35b638b","objUUID":"161eec8c-7687-4292-8a1d-fdbb8e8530ee","i":30,"r":[1.57,0,1.57],"st":"VERT_CIRCLEZ_CC_PLAT","bv":1,"sf":70,"sa":1,"si":3},{"p":[135,11,37],"meshUUID":"6b019a83-e86b-4c20-beeb-6a3c5f1ed133","objUUID":"5984e84e-900f-49c5-929b-1162e06ba757","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":11},{"p":[137,10,37],"meshUUID":"0384ac8e-4d17-434b-b677-ef3e0df9c2f2","objUUID":"22ead92d-f746-48fc-ba20-68ece63e1563","i":35,"si":15},{"p":[-150,10,37],"meshUUID":"98424399-6188-4218-9218-dfc8742a3aea","objUUID":"5c187305-d0cb-4d76-b866-8f6425929fb1","i":35,"si":15},{"p":[-231,51,37],"meshUUID":"fecc18b9-1608-47ac-97b2-3c1e17164ab9","objUUID":"5223d11d-10f8-4ea9-9864-66d8dedcee1e","i":64,"l":1,"nid":851,"si":2},{"p":[-228.96,54.09,37],"meshUUID":"c32de8eb-ba74-4138-b564-9de8438ea3f2","objUUID":"969daef9-6dd3-4eb5-95dd-5387788ff48e","i":30,"r":[1.57,0,-1.57],"st":"VERT_CIRCLEZ_CC_0_5_PLAT","bv":1,"sf":57,"sa":1,"si":3},{"p":[-231,11,37],"meshUUID":"47413c3d-69bf-42fe-8b20-40c69b6de00b","objUUID":"a27174de-7a8e-426d-b6ce-24e8e649a576","i":29,"pl":1,"cdy":1,"o":0.7,"tm":0,"tas":[{}],"sd":1,"ci":0,"si":11},{"p":[-229,10,37],"meshUUID":"ff8cf6e1-7ab1-44ee-90ad-60c742613d88","objUUID":"6ecc930e-0970-43c6-b644-eed34da73bb2","i":35,"si":15}],"config":{"classes":[9],"settings":{"maxPlayers":20,"gameTime":0}},"scripts":{"client":"","server":""}},"groups":{"493c2716-93c4-4496-a634-b2d3363964de":{"ids":["23eff5f0-d705-4d7e-b2ae-8ed7025f3028","e9016a18-6729-48c6-adbd-b849d891e163","a77a4e72-03d9-414b-a5cb-ebaa5f38b1ce"]},"25ca7813-b506-4753-ba13-3bdd6707173d":{"ids":["d7e27226-c4ea-47f7-aa3e-dee4a0ec9143","afb40494-d2c5-45e5-b7eb-68ca02e0b92e","4a375cf4-b307-425f-88d3-044f3ff573b0"]},"ef114562-aec7-4415-b987-97ab28bc01aa":{"ids":["c17b1e6b-67cb-4383-bdbf-f35667908ce1","a4314c74-e18c-46f0-964a-86af845c941d","418ccdf4-0015-4b9f-b224-54726edc6dda"]},"dda818ff-b7bc-478e-b4d2-366b3888f2f9":{"ids":["51ce432e-99f4-47cf-a329-1a537353b425","f63c26e9-0a27-4f95-af08-4b44fd2c11ae","35d2f234-500c-44d7-bdc6-09dcad7a505d"]},"8d55049a-8155-4d8d-bb99-0ce960c1e9d4":{"ids":["a3f87a0d-609f-49f0-9ed6-8a92ddd3008d","438863a3-35b0-4918-bbfa-4ae525d00dee","3b24c6a5-2e43-4ab0-8d21-bcf284989e00"]},"205984bc-51f4-42b5-8fcc-a64e31afbc63":{"ids":["54e12a9b-e299-4e3b-9542-45eb071001d4","9d877895-1634-4cba-8ae0-3d6adbfdce3d","e1fc0070-fe0f-496c-84f2-383e7297edeb"]},"e82222d5-c855-4ae5-8995-75b5bd755a8f":{"ids":["ccc42296-d3cc-436b-8f61-f455a9cb19eb","fb14785a-1865-4e58-819b-2ee321fe3daa","91c5bd08-a90d-49a8-8ffe-d7e8329edb59"]},"4ca2014e-12ea-4851-8677-57bc8b2eb8ab":{"ids":["b8f32724-5f4c-4129-9d9f-1682476fed08","30e43e38-8bbb-4128-ab38-27653e65efd2","daded675-9d9e-4fe6-b9b0-308f5ab51a17"]},"b0c8c79f-44b5-4e57-82fb-c8291c202370":{"ids":["2cc4b793-0aa8-4aca-b8cf-78852f8bdfd7","b9369c0f-e66e-40ac-82e5-0e6206d4a2cd","f369a65e-ff40-4031-a7d8-223c8ad42a48"]},"0384ac8e-4d17-434b-b677-ef3e0df9c2f2":{"ids":["ce73fb97-bbcb-41d1-b18c-6b5fbbd082d0","89246411-f42d-4205-9738-d97fe35b638b","6b019a83-e86b-4c20-beeb-6a3c5f1ed133"]},"98424399-6188-4218-9218-dfc8742a3aea":{"ids":["e812e3e5-6147-4c1d-ae80-deaf5e83441d","6ec55d54-1ce2-421b-821a-2e2e265a4526","2b64bce8-2823-4c16-b806-46e25387785d"]},"ff8cf6e1-7ab1-44ee-90ad-60c742613d88":{"ids":["fecc18b9-1608-47ac-97b2-3c1e17164ab9","c32de8eb-ba74-4138-b564-9de8438ea3f2","47413c3d-69bf-42fe-8b20-40c69b6de00b"]}},"selected":"0c731f3e-7ef0-4719-80da-d42798c5c1f2","cam":{"p":[490.56394248379223,575.5036135473154,208.55878614220182],"r":[-0.8039999999999934,1.3771853071795714]},"history":[]}