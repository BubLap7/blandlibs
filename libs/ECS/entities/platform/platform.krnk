#include <AABB.krnk>
#include <g.krnk>
#include <plrbhvr_s.krnk>
#include <shake_s.krnk>
#include <syncobjs_s.krnk>
#include <floating.krnk>
#include <ecsgrav.krnk>
#include <ecsphysics.krnk>
#include <ecs_h.krnk>

# ===================================================================
# Library: libs\ECS\entities\platform\platform.krnk
# Author: blandrice
#   Description: first try creating platform
# ===================================================================


# default platform will:
# 1. shake and fall on stepping 3 times
action create(obj props){
    obj newObj = {
        aid: 11676,
        scale:{x:10,y:10,z:10},
        position:{x:0,y:22,z:0},
        velocity:{x:0,y:0,z:0},
        scale:{x:50,y:10,z:50},
        color:0xFFFFFF,
        emissive:0x000000,
        onGround:false,
        collide:{type:AABB_COL_PLRS|AABB_COL_OBJ2PLRS},
        # platcrumbles:{crumblecnt:3,int_crumble:500,_tlastcrumble:0,lifetime:1000},
        # shake:{x:0,y:0,z:0,en:0,intensity:{x:1,y:0,z:1},duration:400}
    };
    if ((str)props.shake != "undefined")
    {
        newObj.shake = {x:0,y:0,z:0,en:0,intensity:{x:1,y:0,z:1},duration:400};
    }
    if ((str)props.crumble != "undefined")
    {
        newObj.platcrumbles=
            {   
                crumblecnt:(num)props.crumble.crumblecnt,
                int_crumble:(num)props.crumble.int_crumble,
                lifetime:(num)props.crumble.lifetime,
                _tlastcrumble:0
            };
    }
    if ((str)props.floating != "undefined")
    {
        newObj.floating=
            {
                ogpos:{x:(num)props.floating.ogpos.x,y:(num)props.floating.ogpos.y,z:(num)props.floating.ogpos.z},
                amplitude: {x:(num)props.floating.amplitude.x,y:(num)props.floating.amplitude.y,z:(num)props.floating.amplitude.z},
                t_msinterval: (num)props.floating.t_msinterval,
                type: {x:(str)props.floating.type.x,y:(str)props.floating.type.y,z:(str)props.floating.type.z},
                offset: ((str)props.floating.offset != "undefined") ? (num) props.floating.offset: 0,
                cc: ((str)props.floating.cc != "undefined") ? -1: 1,
                _tstart: g_tnow,
            };
    }
    if (notEmpty (obj)props.position){
        newObj.position.x = (num)props.position.x;
        newObj.position.y = (num)props.position.y;
        newObj.position.z = (num)props.position.z;
    }
    if (notEmpty (obj)props.scale){
        newObj.scale.x = (num)props.scale.x;
        newObj.scale.y = (num)props.scale.y;
        newObj.scale.z = (num)props.scale.z;
    }
    if ((str)props.color != "undefined"){
        newObj.color = (num) props.color;
    }
    if ((str)props.color != "undefined"){
        newObj.aid = (num) props.aid;
    }
    syncobjs_s_createObject(newObj);
    # gravity:{x:0,y:-100,z:0}
}

num [] colorcrumble = num[0xFF0000,0xFFFF00,0x00FF00];
private action onCollidePlrs(obj tobj, obj[] res){
    if (notEmpty (obj) tobj.platcrumbles){
        if ((g_tnow - (num)tobj.platcrumbles._tlastcrumble) > (num)tobj.platcrumbles.int_crumble){
            if ((num)tobj.platcrumbles.crumblecnt > 0){
                (num)tobj.platcrumbles.crumblecnt--;
                tobj.emissive = colorcrumble[((num)tobj.platcrumbles.crumblecnt % 3)];
                tobj.shake.en = 1;
                tobj.platcrumbles._tlastcrumble = g_tnow;
            }
            if ((num)tobj.platcrumbles.crumblecnt == 0 && !notEmpty (obj) tobj.gravity){
                tobj.gravity = {x:0,y:-100,z:0};
            }
        }
    }
}

private action onECSUpdate(num delta, obj tobj, obj[] objlist){
    if (notEmpty (obj) tobj.platcrumbles){
        if ((num)tobj.platcrumbles.crumblecnt == 0 && (g_tnow - (num)tobj.platcrumbles._tlastcrumble) > (num)tobj.platcrumbles.lifetime){
            syncobjs_s_deleteObject((str)tobj.objid);
            
        }
    }
}